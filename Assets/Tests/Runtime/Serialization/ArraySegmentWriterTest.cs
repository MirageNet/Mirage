using System;
using Mirage.Serialization;
using NUnit.Framework;

namespace Mirage.Tests.Runtime.Serialization
{
    [TestFixture]
    public class ArraySegmentWriterTest
    {
        /// <summary>
        /// ArraySegment<byte> is a special case,  optimized for no copy and no allocation
        /// other types are generated by the weaver 
        /// </summary>
        public class ByteSegment
        {
            [Test]
            public void TestEmptyArray()
            {
                var array = new ArraySegment<byte>(new byte[0]);

                byte[] data = MessagePacker.Pack(array);

                ArraySegment<byte> unpacked = MessagePacker.Unpack<ArraySegment<byte>>(data);

                Assert.IsNotNull(unpacked.Array);
                Assert.That(unpacked.Count, Is.EqualTo(0));
            }

            [Test]
            public void TestNullArray()
            {
                ArraySegment<byte> array = default;

                byte[] data = MessagePacker.Pack(array);

                ArraySegment<byte> unpacked = MessagePacker.Unpack<ArraySegment<byte>>(data);

                Assert.IsNull(unpacked.Array);
                Assert.That(unpacked.Offset, Is.EqualTo(0));
                Assert.That(unpacked.Count, Is.EqualTo(0));
            }

            [Test]
            public void TestSegmentArray()
            {
                byte[] sourcedata = { 0, 1, 2, 3, 4, 5, 6 };
                var array = new ArraySegment<byte>(sourcedata, 3, 2);

                byte[] data = MessagePacker.Pack(array);

                ArraySegment<byte> unpacked = MessagePacker.Unpack<ArraySegment<byte>>(data);

                Assert.IsNotNull(unpacked.Array);
                Assert.That(unpacked.Count, Is.EqualTo(2));
                Assert.That(unpacked, Is.EquivalentTo(new byte[] { 3, 4 }));
            }
        }

        public class IntSegment
        {
            [Test]
            public void TestEmptyArray()
            {
                var array = new ArraySegment<int>(new int[0]);

                byte[] data = MessagePacker.Pack(array);

                ArraySegment<int> unpacked = MessagePacker.Unpack<ArraySegment<int>>(data);

                Assert.IsNotNull(unpacked.Array);
                Assert.That(unpacked.Count, Is.EqualTo(0));
            }

            [Test]
            public void TestNullArray()
            {
                ArraySegment<int> array = default;

                byte[] data = MessagePacker.Pack(array);

                ArraySegment<int> unpacked = MessagePacker.Unpack<ArraySegment<int>>(data);

                Assert.IsNull(unpacked.Array);
                Assert.That(unpacked.Offset, Is.EqualTo(0));
                Assert.That(unpacked.Count, Is.EqualTo(0));
            }

            [Test]
            public void TestSegmentArray()
            {
                int[] sourcedata = { 0, 1, 2, 3, 4, 5, 6 };

                var array = new ArraySegment<int>(sourcedata, 3, 2);

                byte[] data = MessagePacker.Pack(array);

                ArraySegment<int> unpacked = MessagePacker.Unpack<ArraySegment<int>>(data);

                Assert.IsNotNull(unpacked.Array);
                Assert.That(unpacked.Count, Is.EqualTo(2));
                Assert.That(unpacked, Is.EquivalentTo(new[] { 3, 4 }));
            }
        }
    }
}
