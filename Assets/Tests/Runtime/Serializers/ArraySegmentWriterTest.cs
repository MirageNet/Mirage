using System;
using NUnit.Framework;

namespace Mirage.Tests
{
    [TestFixture]
    public class ArraySegmentWriterTest
    {
        #region ArraySegment<byte>

        // ArraySegment<byte> is a special case,  optimized for no copy and no allocation
        // other types are generated by the weaver

        [Test]
        public void TestEmptyByteArray()
        {
            var array = new ArraySegment<byte>(new byte[0]);

            byte[] data = MessagePacker.Pack(array);

            ArraySegment<byte> unpacked = MessagePacker.Unpack<ArraySegment<byte>>(data);

            Assert.IsNotNull(unpacked.Array);
            Assert.That(unpacked.Count, Is.EqualTo(0));
        }

        public static ArraySegment<int> SampleReader(NetworkReader reader)
        {
            int length = reader.ReadPackedInt32();
            int[] array = new int[length];

            for (int i = 0; i < length; i++)
            {
                array[i] = reader.ReadPackedInt32();
            }

            return new ArraySegment<int>(array);
        }

        [Test]
        public void TestNullByteArray()
        {
            ArraySegment<byte> array = default;

            byte[] data = MessagePacker.Pack(array);

            ArraySegment<byte> unpacked = MessagePacker.Unpack<ArraySegment<byte>>(data);

            Assert.IsNull(unpacked.Array);
            Assert.That(unpacked.Offset, Is.EqualTo(0));
            Assert.That(unpacked.Count, Is.EqualTo(0));
        }

        [Test]
        public void TestSegmentByteArray()
        {
            byte[] sourcedata = { 0, 1, 2, 3, 4, 5, 6 };
            var array = new ArraySegment<byte>(sourcedata, 3, 2);

            byte[] data = MessagePacker.Pack(array);

            ArraySegment<byte> unpacked = MessagePacker.Unpack<ArraySegment<byte>>(data);

            Assert.IsNotNull(unpacked.Array);
            Assert.That(unpacked.Count, Is.EqualTo(2));
            Assert.That(unpacked, Is.EquivalentTo(new byte[] { 3, 4 }));
        }
        #endregion

        #region ArraySegment<int>

        [Test]
        public void TestEmptyIntArray()
        {
            var array = new ArraySegment<int>(new int[0]);

            byte[] data = MessagePacker.Pack(array);

            ArraySegment<int> unpacked = MessagePacker.Unpack<ArraySegment<int>>(data);

            Assert.IsNotNull(unpacked.Array);
            Assert.That(unpacked.Count, Is.EqualTo(0));
        }

        [Test]
        public void TestNullIntArray()
        {
            ArraySegment<int> array = default;

            byte[] data = MessagePacker.Pack(array);

            ArraySegment<int> unpacked = MessagePacker.Unpack<ArraySegment<int>>(data);

            Assert.That(unpacked.Offset, Is.EqualTo(0));
            Assert.That(unpacked.Count, Is.EqualTo(0));
        }

        [Test]
        public void TestSegmentIntArray()
        {
            int[] sourcedata = { 0, 1, 2, 3, 4, 5, 6 };

            var array = new ArraySegment<int>(sourcedata, 3, 2);

            byte[] data = MessagePacker.Pack(array);

            ArraySegment<int> unpacked = MessagePacker.Unpack<ArraySegment<int>>(data);

            Assert.IsNotNull(unpacked.Array);
            Assert.That(unpacked.Count, Is.EqualTo(2));
            Assert.That(unpacked, Is.EquivalentTo(new [] { 3, 4 }));
        }
        #endregion

    }
}
