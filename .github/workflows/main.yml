name: CI
#on:
#  pull_request: {}
#  push: { branches: [master] }

on: 
  pull_request: {}
  push:
    paths-ignore:
      - 'doc/**'
      - '*.md'
  
jobs:

  testRunnerInAllModes:
    name: Unity test
    runs-on: ubuntu-latest
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
  
      # Checkout repository (required to test local actions)
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
        
    #   - name: Activate license
    #     uses: MirrorNG/unity-runner@master
    #     with:
    #       entrypoint: /activate.sh
      
    #   - name: Generate Solution
    #     uses: MirrorNG/unity-runner@master
    #     with:
    #       # Arguments to pass to unity
    #       args: -buildTarget StandaloneWindows64 -customBuildName MirrorNG -customBuildPath ./build/StandaloneWindows64 -projectPath . -executeMethod  UnityEditor.SyncVS.SyncSolution -quit
    
    #   # Configure test runner
    #   - name: Run editor Tests
    #     uses: MirrorNG/unity-runner@master
    #     with:
    #       args: -runTests -testPlatform editmode -testResults Tests/editmode-results.xml -enableCodeCoverage -coverageResultsPath Tests
            
    #   # Upload artifacts
    #   - name: Publish test results
    #     uses: actions/upload-artifact@v1
    #     with:
    #       name: Test results (editor mode)
    #       path: Tests/editmode-results.xml

    #   - name: Sonarscanner for dotnet
    #     uses: Secbyte/dotnet-sonarscanner@v1.2
    #     with:
    #       buildCommand: dotnet build MirrorNG
    #       projectKey: MirrorNG_MirrorNG
    #       projectName: MirrorNG
    #       sonarOrganisation: mirrorng
    #       beginArguments: /d:sonar.verbose="true"
    #     env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # no need to return license for personal license
    # Return License
    #   - name: Return license
    #     if: always()
    #     uses: MirrorNG/unity-runner@master
    #     with:
    #       # Arguments to pass to unity
    #       args: -returnlicense -quit

    #   - name: Generate UPM package
    #     #if: github.ref == 'refs/heads/master'
    #     run: |
    #        git subtree push --prefix=Assets/Mirror origin upmtest
        
    #   - name: Checkout repository
    #     uses: actions/checkout@v2
    #     with:
    #       fetch-depth: 0
    #       ref: 'upmtest'

      - name: Release
        uses: brpaz/action-semantic-release@v1
        with:
          dry_run: "false"
          install_plugins: "@mob-sakai/semantic-release-git-snapshot"
          branch: semver
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        