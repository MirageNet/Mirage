"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[4073],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(b,i(i({ref:n},p),{},{components:t})):r.createElement(b,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},40340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:7,title:"Spawn Object - Pooling"},i=void 0,s={unversionedId:"guides/game-objects/spawn-object-pooling",id:"guides/game-objects/spawn-object-pooling",title:"Spawn Object - Pooling",description:"Setting Up a Game Object Pool with Custom Spawn Handlers",source:"@site/docs/guides/game-objects/spawn-object-pooling.md",sourceDirName:"guides/game-objects",slug:"/guides/game-objects/spawn-object-pooling",permalink:"/Mirage/docs/guides/game-objects/spawn-object-pooling",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/game-objects/spawn-object-pooling.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Spawn Object - Pooling"},sidebar:"docs",previous:{title:"Spawn Object - Custom",permalink:"/Mirage/docs/guides/game-objects/spawn-object-custom"},next:{title:"Scene Objects",permalink:"/Mirage/docs/guides/game-objects/scene-objects"}},l={},c=[{value:"Setting Up a Game Object Pool with Custom Spawn Handlers",id:"setting-up-a-game-object-pool-with-custom-spawn-handlers",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"setting-up-a-game-object-pool-with-custom-spawn-handlers"},"Setting Up a Game Object Pool with Custom Spawn Handlers"),(0,o.kt)("p",null,"Here is an example of how you might set up a simple game object pooling system with custom spawn handlers. Spawning and unspawning then puts game objects in or out of the pool."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'using System.Collections.Generic;\nusing Mirage;\nusing UnityEngine;\n\nnamespace Mirage.Examples\n{\n    public class PrefabPoolManager : MonoBehaviour\n    {\n        [Header("Settings")]\n        public ClientObjectManager clientObjectManager;\n        public int startSize = 5;\n        public int maxSize = 20;\n        public NetworkIdentity prefab;\n\n        [Header("Debug")]\n        [SerializeField] int currentCount;\n\n        Queue<NetworkIdentity> pool;\n\n        void Start()\n        {\n            InitializePool();\n\n            clientObjectManager.RegisterPrefab(prefab, SpawnHandler, UnspawnHandler);\n        }\n\n        // used by clientObjectManager.RegisterPrefab\n        NetworkIdentity SpawnHandler(SpawnMessage msg)\n        {\n            return GetFromPool(msg.position, msg.rotation);\n        }\n\n        // used by clientObjectManager.RegisterPrefab\n        void UnspawnHandler(NetworkIdentity spawned)\n        {\n            PutBackInPool(spawned);\n        }\n\n        void OnDestroy()\n        {\n            clientObjectManager.UnregisterPrefab(prefab);\n        }\n\n        private void InitializePool()\n        {\n            pool = new Queue<NetworkIdentity>();\n            for (int i = 0; i < startSize; i++)\n            {\n                NetworkIdentity next = CreateNew();\n\n                pool.Enqueue(next);\n            }\n        }\n\n        NetworkIdentity CreateNew()\n        {\n            if (currentCount > maxSize)\n            {\n                Debug.LogError($"Pool has reached max size of {maxSize}");\n                return null;\n            }\n\n            // use this object as parent so that objects dont crowd hierarchy\n            NetworkIdentity next = Instantiate(prefab, transform);\n            next.name = $"{prefab.name}_pooled_{currentCount}";\n            next.gameObject.SetActive(false);\n            currentCount++;\n            return next;\n        }\n\n        /// <summary>\n        /// Used to take Object from Pool.\n        /// <para>Should be used on server to get the next Object</para>\n        /// </summary>\n        /// <param name="position"></param>\n        /// <param name="rotation"></param>\n        /// <returns></returns>\n        public NetworkIdentity GetFromPool(Vector3 position, Quaternion rotation)\n        {\n            NetworkIdentity next = pool.Count > 0\n                ? pool.Dequeue() // take from pool\n                : CreateNew(); // create new because pool is empty\n\n            // CreateNew might return null if max size is reached\n            if (next == null) { return null; }\n\n            // set position/rotation and set active\n            next.transform.position = position;\n            next.transform.rotation = rotation;\n            next.gameObject.SetActive(true);\n            return next;\n        }\n\n        /// <summary>\n        /// Used to put object back into pool so they can b\n        /// <para>Should be used on server after unspawning an object</para>\n        /// </summary>\n        /// <param name="spawned"></param>\n        public void PutBackInPool(NetworkIdentity spawned)\n        {\n            // disable object\n            spawned.gameObject.SetActive(false);\n\n            // add back to pool\n            pool.Enqueue(spawned);\n        }\n    }\n}\n')),(0,o.kt)("p",null,"To use this manager, create a new empty game object and add the ",(0,o.kt)("inlineCode",{parentName:"p"},"PrefabPoolManager")," component (code above). Next, drag a prefab you want to spawn multiple times to the Prefab field, and set ",(0,o.kt)("inlineCode",{parentName:"p"},"startSize")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"maxSize")," fields. ",(0,o.kt)("inlineCode",{parentName:"p"},"startSize")," is how many will be spawned when your game starts. ",(0,o.kt)("inlineCode",{parentName:"p"},"maxSize")," is the max number that can be spawned, if this number is reached then an error will be given when trying to more new objects."),(0,o.kt)("p",null,"Finally, set up a reference to the PrefabPoolManager in the script you are using for player movement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"PrefabPoolManager prefabPoolManager;\n\nvoid Start()\n{\n    prefabPoolManager = FindObjectOfType<PrefabPoolManager>();\n}\n")),(0,o.kt)("p",null,"Your player logic might contain something like this, which moves and fires coins:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'void Update()\n{\n    if (!isLocalPlayer)\n        return;\n    \n    // move\n    var x = Input.GetAxis("Horizontal") * 0.1f;\n    var z = Input.GetAxis("Vertical") * 0.1f;\n    transform.Translate(x, 0, z);\n\n    // shoot\n    if (Input.GetKeyDown(KeyCode.Space))\n    {\n        // Server RPC Call function is called on the client, but invoked on the server\n        CmdFire();\n    }\n}\n')),(0,o.kt)("p",null,"In the firing logic on the player, make it use the game object pool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"[ServerRpc]\nvoid CmdFire()\n{\n    // Set up bullet on server\n    NetworkIdentity bullet = prefabPoolManager.GetFromPool(transform.position + transform.forward, Quaternion.identity);\n\n    Rigidbody rigidBody = bullet.GetComponent<Rigidbody>();\n    rigidBody.velocity = transform.forward * 4;\n\n    // tell server to send SpawnMessage, which will call SpawnHandler on client\n    ServerObjectManager.Spawn(bullet);\n\n    // destroy bullet after 2 seconds\n    StartCoroutine(DestroyDelay(bullet, 2.0f));\n}\n\nIEnumerator DestroyDelay(NetworkIdentity go, float delay)\n{\n    yield return new WaitForSeconds(delay);\n\n    // return object to pool on server\n    prefabPoolManager.PutBackInPool(go);\n\n    // tell server to send ObjectDestroyMessage, which will call UnspawnHandler on client\n    ServerObjectManager.Destroy(go, destroyServerObject: false);\n}\n")),(0,o.kt)("p",null,"The Destroy method above shows how to return game objects to the pool so that they can be re-used when you fire again"))}u.isMDXComponent=!0}}]);