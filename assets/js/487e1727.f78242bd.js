"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[125],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>k});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=r.createContext({}),d=function(e){var a=r.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=d(e.components);return r.createElement(o.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(t),k=n,m=u["".concat(o,".").concat(k)]||u[k]||s[k]||l;return t?r.createElement(m,i(i({ref:a},p),{},{components:t})):r.createElement(m,i({ref:a},p))}));function k(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,i=new Array(l);i[0]=u;var c={};for(var o in a)hasOwnProperty.call(a,o)&&(c[o]=a[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var d=2;d<l;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},31725:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=t(87462),n=(t(67294),t(3905));const l={id:"CharacterSpawner",title:"CharacterSpawner"},i="Class CharacterSpawner",c={unversionedId:"reference/Mirage/CharacterSpawner",id:"reference/Mirage/CharacterSpawner",title:"CharacterSpawner",description:"Spawns a player as soon as the connection is authenticated",source:"@site/docs/reference/Mirage/CharacterSpawner.md",sourceDirName:"reference/Mirage",slug:"/reference/Mirage/CharacterSpawner",permalink:"/Mirage/docs/reference/Mirage/CharacterSpawner",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/reference/Mirage/CharacterSpawner.md",tags:[],version:"current",frontMatter:{id:"CharacterSpawner",title:"CharacterSpawner"},sidebar:"api",previous:{title:"CharacterSpawner.PlayerSpawnMethod",permalink:"/Mirage/docs/reference/Mirage/CharacterSpawner.PlayerSpawnMethod"},next:{title:"ClientAttribute",permalink:"/Mirage/docs/reference/Mirage/ClientAttribute"}},o={},d=[{value:"Inheritance",id:"inheritance",level:5},{value:"Syntax",id:"syntax",level:5},{value:"Fields",id:"fields",level:3},{value:"Client",id:"client",level:4},{value:"Declaration",id:"declaration",level:5},{value:"Server",id:"server",level:4},{value:"Declaration",id:"declaration-1",level:5},{value:"SceneManager",id:"scenemanager",level:4},{value:"Declaration",id:"declaration-2",level:5},{value:"ClientObjectManager",id:"clientobjectmanager",level:4},{value:"Declaration",id:"declaration-3",level:5},{value:"ServerObjectManager",id:"serverobjectmanager",level:4},{value:"Declaration",id:"declaration-4",level:5},{value:"PlayerPrefab",id:"playerprefab",level:4},{value:"Declaration",id:"declaration-5",level:5},{value:"AutoSpawn",id:"autospawn",level:4},{value:"Declaration",id:"declaration-6",level:5},{value:"SetName",id:"setname",level:4},{value:"Declaration",id:"declaration-7",level:5},{value:"startPositionIndex",id:"startpositionindex",level:4},{value:"Declaration",id:"declaration-8",level:5},{value:"startPositions",id:"startpositions",level:4},{value:"Declaration",id:"declaration-9",level:5},{value:"playerSpawnMethod",id:"playerspawnmethod",level:4},{value:"Declaration",id:"declaration-10",level:5},{value:"Methods",id:"methods",level:3},{value:"Awake()",id:"awake",level:4},{value:"Declaration",id:"declaration-11",level:5},{value:"OnDestroy()",id:"ondestroy",level:4},{value:"Declaration",id:"declaration-12",level:5},{value:"OnClientFinishedSceneChange(Scene, SceneOperation)",id:"onclientfinishedscenechangescene-sceneoperation",level:4},{value:"Declaration",id:"declaration-13",level:5},{value:"Parameters",id:"parameters",level:5},{value:"RequestServerSpawnPlayer()",id:"requestserverspawnplayer",level:4},{value:"Declaration",id:"declaration-14",level:5},{value:"OnServerAddPlayer(INetworkPlayer)",id:"onserveraddplayerinetworkplayer",level:4},{value:"Declaration",id:"declaration-15",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"SetCharacterName(INetworkPlayer, NetworkIdentity)",id:"setcharacternameinetworkplayer-networkidentity",level:4},{value:"Declaration",id:"declaration-16",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"GetStartPosition()",id:"getstartposition",level:4},{value:"Declaration",id:"declaration-17",level:5},{value:"Returns",id:"returns",level:5}],p={toc:d};function s(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"class-characterspawner"},"Class CharacterSpawner"),(0,n.kt)("p",null,"Spawns a player as soon as the connection is authenticated"),(0,n.kt)("div",{class:"inheritance"},(0,n.kt)("h5",{id:"inheritance"},"Inheritance"),(0,n.kt)("div",{class:"level",style:{"--data-index":0}},"System.Object")),(0,n.kt)("h5",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public class CharacterSpawner : MonoBehaviour\n")),(0,n.kt)("h3",{id:"fields"},"Fields"),(0,n.kt)("h4",{id:"client"},"Client"),(0,n.kt)("h5",{id:"declaration"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkClient Client\n")),(0,n.kt)("h4",{id:"server"},"Server"),(0,n.kt)("h5",{id:"declaration-1"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkServer Server\n")),(0,n.kt)("h4",{id:"scenemanager"},"SceneManager"),(0,n.kt)("h5",{id:"declaration-2"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkSceneManager SceneManager\n")),(0,n.kt)("h4",{id:"clientobjectmanager"},"ClientObjectManager"),(0,n.kt)("h5",{id:"declaration-3"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public ClientObjectManager ClientObjectManager\n")),(0,n.kt)("h4",{id:"serverobjectmanager"},"ServerObjectManager"),(0,n.kt)("h5",{id:"declaration-4"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public ServerObjectManager ServerObjectManager\n")),(0,n.kt)("h4",{id:"playerprefab"},"PlayerPrefab"),(0,n.kt)("h5",{id:"declaration-5"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkIdentity PlayerPrefab\n")),(0,n.kt)("h4",{id:"autospawn"},"AutoSpawn"),(0,n.kt)("h5",{id:"declaration-6"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public bool AutoSpawn\n")),(0,n.kt)("h4",{id:"setname"},"SetName"),(0,n.kt)("h5",{id:"declaration-7"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public bool SetName\n")),(0,n.kt)("h4",{id:"startpositionindex"},"startPositionIndex"),(0,n.kt)("h5",{id:"declaration-8"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public int startPositionIndex\n")),(0,n.kt)("h4",{id:"startpositions"},"startPositions"),(0,n.kt)("p",null,"List of transforms where players can be spawned"),(0,n.kt)("h5",{id:"declaration-9"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public List<Transform> startPositions\n")),(0,n.kt)("h4",{id:"playerspawnmethod"},"playerSpawnMethod"),(0,n.kt)("p",null,"The current method of spawning players used by the CharacterSpawner."),(0,n.kt)("h5",{id:"declaration-10"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public CharacterSpawner.PlayerSpawnMethod playerSpawnMethod\n")),(0,n.kt)("h3",{id:"methods"},"Methods"),(0,n.kt)("h4",{id:"awake"},"Awake()"),(0,n.kt)("h5",{id:"declaration-11"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"protected virtual void Awake()\n")),(0,n.kt)("h4",{id:"ondestroy"},"OnDestroy()"),(0,n.kt)("h5",{id:"declaration-12"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"protected virtual void OnDestroy()\n")),(0,n.kt)("h4",{id:"onclientfinishedscenechangescene-sceneoperation"},"OnClientFinishedSceneChange(Scene, SceneOperation)"),(0,n.kt)("p",null,"Called on the client when a normal scene change happens.\nThe default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects."),(0,n.kt)("h5",{id:"declaration-13"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public virtual void OnClientFinishedSceneChange(Scene scene, SceneOperation sceneOperation)\n")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Scene"),(0,n.kt)("td",{parentName:"tr",align:null},"scene"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.SceneOperation"),(0,n.kt)("td",{parentName:"tr",align:null},"sceneOperation"),(0,n.kt)("td",{parentName:"tr",align:null},"The type of scene load that happened.")))),(0,n.kt)("h4",{id:"requestserverspawnplayer"},"RequestServerSpawnPlayer()"),(0,n.kt)("h5",{id:"declaration-14"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public virtual void RequestServerSpawnPlayer()\n")),(0,n.kt)("h4",{id:"onserveraddplayerinetworkplayer"},"OnServerAddPlayer(INetworkPlayer)"),(0,n.kt)("p",null,"Called on the server when a client adds a new player with ClientScene.AddPlayer.\nThe default implementation for this function creates a new player object from the playerPrefab."),(0,n.kt)("h5",{id:"declaration-15"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public virtual void OnServerAddPlayer(INetworkPlayer player)\n")),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"Connection from client.")))),(0,n.kt)("h4",{id:"setcharacternameinetworkplayer-networkidentity"},"SetCharacterName(INetworkPlayer, NetworkIdentity)"),(0,n.kt)("h5",{id:"declaration-16"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"protected virtual void SetCharacterName(INetworkPlayer player, NetworkIdentity character)\n")),(0,n.kt)("h5",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"getstartposition"},"GetStartPosition()"),(0,n.kt)("p",null,"This finds a spawn position based on start position objects in the scene.\nThis is used by the default implementation of OnServerAddPlayer."),(0,n.kt)("h5",{id:"declaration-17"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public virtual Transform GetStartPosition()\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Transform"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the transform to spawn a player at, or null.")))))}s.isMDXComponent=!0}}]);