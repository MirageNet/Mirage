"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[3518],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(a),k=r,m=d["".concat(p,".").concat(k)]||d[k]||s[k]||i;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},38806:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const i={},l="Float Pack",o={unversionedId:"guides/bit-packing/float-pack",id:"guides/bit-packing/float-pack",title:"Float Pack",description:"A float value can be compressed using FloatPackAttribute",source:"@site/docs/guides/bit-packing/float-pack.md",sourceDirName:"guides/bit-packing",slug:"/guides/bit-packing/float-pack",permalink:"/Mirage/docs/guides/bit-packing/float-pack",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/bit-packing/float-pack.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Bit Count",permalink:"/Mirage/docs/guides/bit-packing/bit-count"},next:{title:"Quaternion Pack",permalink:"/Mirage/docs/guides/bit-packing/quaternion-pack"}},p={},u=[{value:"Use cases",id:"use-cases",level:3},{value:"Supported Types",id:"supported-types",level:3},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Generated Code",id:"generated-code",level:3}],c={toc:u};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"float-pack"},"Float Pack"),(0,r.kt)("p",null,"A float value can be compressed using ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/Mirage.Serialization/FloatPackAttribute"},"FloatPackAttribute")),(0,r.kt)("p",null,"The float value will be quantized and turned into an integer with at least the resolution that is given in the attribute."),(0,r.kt)("p",null,"The real resolution used is calculated from the ",(0,r.kt)("inlineCode",{parentName:"p"},"bitcount")," required to pack the value. For example, if the max is ",(0,r.kt)("inlineCode",{parentName:"p"},"100"),", and the resolution is ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1f"),", then there are ",(0,r.kt)("inlineCode",{parentName:"p"},"2000")," discrete values are needed to pack this. This requires 11 bits. 11 bits allow for ",(0,r.kt)("inlineCode",{parentName:"p"},"2047")," discrete values so the real resolution used will be ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0977f"),"."),(0,r.kt)("p",null,"Values are packed so that 0 will unpack are 0, and other values are rounded to the nearest int so that rounding errors stay as low as possible."),(0,r.kt)("p",null,"Values are clamped so values out of range will be packed as min/max values instead"),(0,r.kt)("h3",{id:"use-cases"},"Use cases"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Value with a maximum value")),(0,r.kt)("h3",{id:"supported-types"},"Supported Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Float")),(0,r.kt)("h3",{id:"example-1"},"Example 1"),(0,r.kt)("p",null,"Health which is between 0 and 100"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyNetworkBehaviour : NetworkBehaviour \n{\n    [SyncVar, FloatPack(100f, 0.02f)]\n    public int Health;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Max = 100"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resolution = 0.02f")," so bit count is 14"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"health = 57.2f")," will serialize to ",(0,r.kt)("inlineCode",{parentName:"p"},"01_0010_0100_1101")," and deserialize to ",(0,r.kt)("inlineCode",{parentName:"p"},"57.197f")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"health = -13.5f")," will serialize to ",(0,r.kt)("inlineCode",{parentName:"p"},"11_1011_1010_1110")," and deserialize to ",(0,r.kt)("inlineCode",{parentName:"p"},"-13.503f")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"health = 120f")," will be clamped to ",(0,r.kt)("inlineCode",{parentName:"p"},"100f")),(0,r.kt)("h3",{id:"example-2"},"Example 2"),(0,r.kt)("p",null,"A Percent that where you only want to send 8 bits"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyNetworkBehaviour : NetworkBehaviour \n{\n    [SyncVar, FloatPack(1f, 8)]\n    public int Percent;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Max = 1f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bitCount = 8")," so resolution will be ",(0,r.kt)("inlineCode",{parentName:"p"},"0.00787f")),(0,r.kt)("h3",{id:"generated-code"},"Generated Code"),(0,r.kt)("p",null,"Source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[SyncVar, FloatPack(100f, 0.02f)]\npublic int myValue;\n")),(0,r.kt)("p",null,"Generated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"\nprivate FloatPacker myValue__Packer = new FloatPacker(100f, 0.02f);\n\npublic override bool SerializeSyncVars(NetworkWriter writer, bool initialState)\n{\n    ulong syncVarDirtyBits = base.SyncVarDirtyBits;\n    bool result = base.SerializeSyncVars(writer, initialize);\n\n    if (initialState) \n    {\n        myValue__Packer.Pack(writer, this.myValue);\n        return true;\n    }\n\n    writer.Write(syncVarDirtyBits, 1);\n    if ((syncVarDirtyBits & 1UL) != 0UL)\n    {\n        myValue__Packer.Pack(writer, this.myValue);\n        result = true;\n    }\n\n    return result;\n}\n\npublic override void DeserializeSyncVars(NetworkReader reader, bool initialState)\n{\n    base.DeserializeSyncVars(reader, initialState);\n\n    if (initialState)\n    {\n        this.myValue = myValue__Packer.Unpack(reader);\n        return;\n    }\n\n    ulong dirtyMask = reader.Read(1);\n    if ((dirtyMask & 1UL) != 0UL)\n    {\n        this.myValue = myValue__Packer.Unpack(reader);\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"last updated for Mirage v101.8.0")))}s.isMDXComponent=!0}}]);