"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[3345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(n),u=a,b=f["".concat(l,".").concat(u)]||f[u]||d[u]||i;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},67962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:5},o="SyncPrefab",s={unversionedId:"guides/serialization/sync-prefab",id:"guides/serialization/sync-prefab",title:"SyncPrefab",description:"Overview",source:"@site/docs/guides/serialization/sync-prefab.md",sourceDirName:"guides/serialization",slug:"/guides/serialization/sync-prefab",permalink:"/Mirage/docs/guides/serialization/sync-prefab",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/serialization/sync-prefab.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Generics",permalink:"/Mirage/docs/guides/serialization/generics"},next:{title:"Bit Packing",permalink:"/Mirage/docs/guides/bit-packing/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Example Use Case",id:"example-use-case",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"syncprefab"},"SyncPrefab"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncPrefab")," struct represents a prefab that is synchronized over the network. "),(0,a.kt)("p",null,"It has two properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Prefab"),": A ",(0,a.kt)("inlineCode",{parentName:"li"},"NetworkIdentity")," representing the prefab being synced."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PrefabHash"),": An integer representing the hash of the prefab being synced. The ",(0,a.kt)("inlineCode",{parentName:"li"},"PrefabHash")," is sent over the network so that the matching ",(0,a.kt)("inlineCode",{parentName:"li"},"NetworkIdentity")," can be found on the other side.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SyncPrefab")," can be used to set up local objects like visual effects, audio, or projectiles, without needing to spawn them over the network, making it ideal for short-lived objects."),(0,a.kt)("h2",{id:"example-use-case"},"Example Use Case"),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"Shoot")," method is called on the server it will instantiates a local copy of the prefab. The ",(0,a.kt)("inlineCode",{parentName:"p"},"RpcShoot")," is then called to send a message to all clients, Passing in a ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncPrefab")," object representing the prefab being synced."),(0,a.kt)("p",null,"On the client side, the ",(0,a.kt)("inlineCode",{parentName:"p"},"RpcShoot")," method finds the prefab from ",(0,a.kt)("inlineCode",{parentName:"p"},"ClientObjectManager")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"FindPrefab"),". It then instantiates a local clone of the prefab. "),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"[NetworkedPrefab]")," attribute to your inspector field to show if it is set up correctly.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class Shooter : NetworkBehaviour\n {\n     // add [NetworkedPrefab] to ensure prefab is network object in inspector\n     [NetworkedPrefab]\n     public GameObject Prefab;\n\n     // call this on server\n     public void Shoot(Vector3 position, Quaternion rotation)\n     {\n         // spawn prefab locally\n         var clone = Instantiate(Prefab, position, rotation);\n\n         // then send to clients so they can also spawn locally\n\n         RpcShoot(new SyncPrefab(Prefab.GetNetworkIdentity()), position, rotation);\n     }\n\n     [ClientRpc]\n     public void RpcShoot(SyncPrefab syncPrefab, Vector3 position, Quaternion rotation)\n     {\n         // find prefab from objectManager\n         var prefab = syncPrefab.FindPrefab(ClientObjectManager);\n\n         // spawn prefab locally\n         var clone = Instantiate(prefab, position, rotation);\n     }\n }\n")))}d.isMDXComponent=!0}}]);