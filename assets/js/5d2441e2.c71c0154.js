"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[1568],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,y=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:2},o="Data Types",s={unversionedId:"guides/serialization/data-types",id:"guides/serialization/data-types",title:"Data Types",description:"The client and server can pass data to each other via RPC Methods, State Synchronization, or Network Messages.",source:"@site/docs/guides/serialization/data-types.md",sourceDirName:"guides/serialization",slug:"/guides/serialization/data-types",permalink:"/Mirage/docs/guides/serialization/data-types",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/serialization/data-types.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Serialization",permalink:"/Mirage/docs/guides/serialization/"},next:{title:"Advanced Serialization",permalink:"/Mirage/docs/guides/serialization/advanced"}},l={},c=[{value:"Game Objects",id:"game-objects",level:2},{value:"Custom Data Types",id:"custom-data-types",level:2},{value:"Inheritance and Polymorphism",id:"inheritance-and-polymorphism",level:2},{value:"Scriptable Objects",id:"scriptable-objects",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-types"},"Data Types"),(0,r.kt)("p",null,"The client and server can pass data to each other via ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/remote-actions/"},"RPC Methods"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/sync/"},"State Synchronization"),", or ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/remote-actions/network-messages"},"Network Messages"),"."),(0,r.kt)("p",null,"Mirage supports a number of data types you can use with these, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic c# types (byte, int, char, uint, UInt64, float, string, etc)"),(0,r.kt)("li",{parentName:"ul"},"Built-in Unity math type (Vector3, Quaternion, Rect, Plane, Vector3Int, etc)"),(0,r.kt)("li",{parentName:"ul"},"NetworkIdentity"),(0,r.kt)("li",{parentName:"ul"},"Game Object with a NetworkIdentity component attached ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See important details in ",(0,r.kt)("a",{parentName:"li",href:"#game-objects"},"Game Objects")," section below."))),(0,r.kt)("li",{parentName:"ul"},"Structures with any of the above  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It's recommended to implement ",(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},(0,r.kt)("inlineCode",{parentName:"a"},"IEquatable<T>"))," to avoid boxing and to have the struct ",(0,r.kt)("inlineCode",{parentName:"li"},"readonly")," because modifying one of the fields doesn't cause a resync."))),(0,r.kt)("li",{parentName:"ul"},"Classes as long as each field has a supported data type ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"These will allocate garbage and will be instantiated new on the receiver every time they're sent."))),(0,r.kt)("li",{parentName:"ul"},"ScriptableObject as long as each field has a supported data type ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"These will allocate garbage and will be instantiated new on the receiver every time they're sent."))),(0,r.kt)("li",{parentName:"ul"},"Arrays of any of the above ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Not supported with SyncVars or SyncLists."))),(0,r.kt)("li",{parentName:"ul"},"ArraySegments of any of the above ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Not supported with SyncVars or SyncLists.")))),(0,r.kt)("h2",{id:"game-objects"},"Game Objects"),(0,r.kt)("p",null,"Game Objects in SyncVars, SyncLists, and SyncDictionaries are fragile in some cases and should be used with caution."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"As long as the game object ",(0,r.kt)("em",{parentName:"li"},"already exists")," on both the server and the client, the reference should be fine.")),(0,r.kt)("p",null,"When the sync data arrives at the client, the referenced game object may not yet exist on that client, resulting in null values in the sync data. This is because internally Mirage passes the ",(0,r.kt)("inlineCode",{parentName:"p"},"NetId")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkIdentity")," and tries to look it up on the client's ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkIdentity.World.Spawned")," dictionary."),(0,r.kt)("p",null,"If the object hasn't been spawned on the client yet, no match will be found. It could be in the same payload, especially for joining clients, but after the sync data from another object.",(0,r.kt)("br",{parentName:"p"}),"\n","It could also be null because the game object is excluded from a client due to network visibility, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkProximityChecker"),".  "),(0,r.kt)("p",null,"You may find that it's more robust to sync the ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkIdentity.NetID")," (",(0,r.kt)("inlineCode",{parentName:"p"},"uint"),") instead, and do your own lookup in\n",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkIdentity.World.Spawned")," to get the object, perhaps in a coroutine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"    public GameObject target;\n\n    [SyncVar(hook = nameof(OnTargetChanged))]\n    public uint targetID;\n\n    void OnTargetChanged(uint _, uint newValue)\n    {\n        if (NetworkIdentity.World.Spawned.TryGetValue(targetID, out NetworkIdentity identity))\n            target = identity.gameObject;\n        else\n            StartCoroutine(SetTarget());\n    }\n\n    IEnumerator SetTarget()\n    {\n        while (target == null)\n        {\n            yield return null;\n            if (NetworkIdentity.World.SpawnedObjects.TryGetValue(targetID, out NetworkIdentity identity))\n                target = identity.gameObject;\n        }\n    }\n")),(0,r.kt)("h2",{id:"custom-data-types"},"Custom Data Types"),(0,r.kt)("p",null,"Sometimes you don't want Mirage to generate serialization for your own types. For example, instead of serializing quest data, you may want to serialize just the quest id, and the receiver can look up the quest by id in a predefined list."),(0,r.kt)("p",null,"Sometimes you may want to serialize data that uses a different type not supported by Mirage, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Uri"),"."),(0,r.kt)("p",null,"You can add support for any type by adding extension methods to ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkWriter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkReader"),". For example, to add support for ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime"),", add this somewhere in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static class DateTimeReaderWriter\n{\n      public static void WriteDateTime(this NetworkWriter writer, DateTime dateTime)\n      {\n          writer.WriteInt64(dateTime.Ticks);\n      }\n     \n      public static DateTime ReadDateTime(this NetworkReader reader)\n      {\n          return new DateTime(reader.ReadInt64());\n      }\n}\n")),(0,r.kt)("p",null,"...then you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"[ServerRpc]")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncList")),(0,r.kt)("h2",{id:"inheritance-and-polymorphism"},"Inheritance and Polymorphism"),(0,r.kt)("p",null,"Sometimes you might want to send a polymorphic data type to your commands. Mirage does not serialize the type name to keep messages small and for security reasons, therefore Mirage cannot figure out the type of object it received by looking at the message."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This code does not work out of the box.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class Item \n{\n    public string name;\n}\n\nclass Weapon : Item\n{\n    public int hitPoints;\n}\n\nclass Armor : Item\n{\n    public int hitPoints;\n    public int level;\n}\n\nclass Player : NetworkBehaviour\n{\n    [ServerRpc]\n    void ServerRpcEquip(Item item)\n    {\n        // IMPORTANT: this does not work. Mirage will pass you an object of type item\n        // even if you pass a weapon or an armor.\n        if (item is Weapon weapon)\n        {\n            // The item is a weapon, \n            // maybe you need to equip it in the hand\n        }\n        else if (item is Armor armor)\n        {\n            // you might want to equip armor in the body\n        }\n    }\n\n    [ServerRpc]\n    void ServerEquipArmor(Armor armor)\n    {\n        // IMPORTANT: this does not work either, you will receive an armor, but \n        // the armor will not have a valid Item.name, even if you passed an armor with name\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServerRpcEquip")," will work if you provide a custom serializer for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Item")," type. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'\npublic static class ItemSerializer \n{\n    const byte WEAPON = 1;\n    const byte ARMOR = 2;\n\n    public static void WriteItem(this NetworkWriter writer, Item item)\n    {\n        if (item is Weapon weapon)\n        {\n            writer.WriteByte(WEAPON);\n            writer.WriteString(weapon.name);\n            writer.WritePackedInt32(weapon.hitPoints);\n        }\n        else if (item is Armor armor)\n        {\n            writer.WriteByte(ARMOR);\n            writer.WriteString(armor.name);\n            writer.WritePackedInt32(armor.hitPoints);\n            writer.WritePackedInt32(armor.level);\n        }\n    }\n\n    public static Item ReadItem(this NetworkReader reader)\n    {\n        byte type = reader.ReadByte();\n        switch(type)\n        {\n            case WEAPON:\n                return new Weapon\n                {\n                    name = reader.ReadString(),\n                    hitPoints = reader.ReadPackedInt32()\n                };\n            case ARMOR:\n                return new Armor\n                {\n                    name = reader.ReadString(),\n                    hitPoints = reader.ReadPackedInt32(),\n                    level = reader.ReadPackedInt32()\n                };\n            default:\n                throw new Exception($"Invalid weapon type {type}");\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"scriptable-objects"},"Scriptable Objects"),(0,r.kt)("p",null,"People often want to send scriptable objects from the client or server. For example, you may have a bunch of swords created as scriptable objects and you want to put the equipped sword in a ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-var"},"SyncVar"),". This will work fine, Mirage will generate a reader and writer for scriptable objects by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptableObject.CreateInstance")," and copy all the data. "),(0,r.kt)("p",null,"However, the generated reader and writer are not suitable for every occasion. Scriptable objects often reference other assets such as textures, prefabs, or other types that can't be serialized. Scriptable objects are often saved in the Resources folder or they can sometimes have a large amount of data in them. The generated reader and writers may not work or may be inefficient for these situations."),(0,r.kt)("p",null,"Instead of passing the scriptable object data, you can pass the name and the other side can look up the same object by name. This way you can have any kind of data in your scriptable object. You can do that by providing a custom reader and writer.",(0,r.kt)("br",{parentName:"p"}),"\n","Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[CreateAssetMenu(fileName = "New Armor", menuName = "Armor Data")]\nclass Armor : ScriptableObject\n{\n    public int Hitpoints;\n    public int Weight;\n    public string Description;\n    public Texture2D Icon;\n    // ...\n}\n\npublic static class ArmorSerializer \n{\n    public static void WriteArmor(this NetworkWriter writer, Armor armor)\n    {\n       // No need to serialize the data, just the name of the armor.\n       writer.WriteString(armor.name);\n    }\n\n    public static Armor ReadArmor(this NetworkReader reader)\n    {\n        // Load the same armor by name. The data will come from the asset in Resources folder.\n        return Resources.Load<Armor>(reader.ReadString());\n    }\n}\n')))}d.isMDXComponent=!0}}]);