"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[7718],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),y=r,h=d["".concat(o,".").concat(y)]||d[y]||u[y]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},52869:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const s={sidebar_position:3},i="Sync Hash Set",c={unversionedId:"guides/sync/sync-objects/sync-hash-set",id:"guides/sync/sync-objects/sync-hash-set",title:"Sync Hash Set",description:"SyncHashSet is a set similar to C\\# HashSet that synchronizes its contents from the server to the clients.",source:"@site/docs/guides/sync/sync-objects/sync-hash-set.md",sourceDirName:"guides/sync/sync-objects",slug:"/guides/sync/sync-objects/sync-hash-set",permalink:"/Mirage/docs/guides/sync/sync-objects/sync-hash-set",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/sync/sync-objects/sync-hash-set.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Sync Dictionary",permalink:"/Mirage/docs/guides/sync/sync-objects/sync-dictionary"},next:{title:"Sync Sorted Set",permalink:"/Mirage/docs/guides/sync/sync-objects/sync-sorted-set"}},o={},l=[{value:"Usage",id:"usage",level:2},{value:"Basic example",id:"basic-example",level:3}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sync-hash-set"},"Sync Hash Set"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/reference/Mirage.Collections/SyncHashSet-1"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncHashSet"))," is a set similar to C","#"," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1"},"HashSet<T",">")," that synchronizes its contents from the server to the clients."),(0,r.kt)("p",null,"A SyncHashSet can contain any ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/serialization/data-types"},"supported Mirage type")," "),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Create a class that derives from SyncHashSet for your specific type. This is necessary because Mirage will add methods to that class with the weaver. Then add a SyncHashSet field to your NetworkBehaviour class. For example:"),(0,r.kt)("admonition",{title:"IMPORTANT",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You need to initialize the SyncHashSet immediately after the definition in order for them to work. You can mark them as ",(0,r.kt)("inlineCode",{parentName:"p"},"readonly")," to enforce proper usage.")),(0,r.kt)("h3",{id:"basic-example"},"Basic example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[System.Serializable]\npublic class SyncSkillSet : SyncHashSet<string> {}\n\npublic class Player : NetworkBehaviour {\n\n    [SerializeField]\n    readonly SyncSkillSet skills = new SyncSkillSet();\n\n    int skillPoints = 10;\n\n    [Command]\n    public void CmdLearnSkill(string skillName)\n    {\n        if (skillPoints > 1)\n        {\n            skillPoints--;\n\n            skills.Add(skillName);\n        }\n    }\n}\n")),(0,r.kt)("h1",{id:"callbacks"},"Callbacks"),(0,r.kt)("p",null,"You can detect when a SyncHashSet changes on the client and/or the server. This is especially useful for refreshing your UI, character appearance, etc. "),(0,r.kt)("p",null,"Subscribe to the Callback event typically during ",(0,r.kt)("inlineCode",{parentName:"p"},"Start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"OnClientStart"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"OnServerStart")," for that. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note that by the time you subscribe, the set will already be initialized, so you will not get a call for the initial data, only updates.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[System.Serializable]\npublic class SyncSetBuffs : SyncHashSet<string> {};\n\npublic class Player : NetworkBehaviour\n{\n    [SerializeField]\n    public readonly SyncSetBuffs buffs = new SyncSetBuffs();\n\n    // this will add the delegate on the client.\n    // Use OnStartServer instead if you want it on the server\n    public override void OnStartClient()\n    {\n        buffs.Callback += OnBuffsChanged;\n    }\n\n    private void OnBuffsChanged(SyncSetBuffs.Operation op, string buff)\n    {\n        switch (op) \n        {\n            case SyncSetBuffs.Operation.OP_ADD:\n                // we added a buff, draw an icon on the character\n                break;\n            case SyncSetBuffs.Operation.OP_CLEAR:\n                // clear all buffs from the character\n                break;\n            case SyncSetBuffs.Operation.OP_REMOVE:\n                // We removed a buff from the character\n                break;\n        }\n    }\n}\n")))}u.isMDXComponent=!0}}]);