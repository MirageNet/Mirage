"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[9078],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(a),m=l,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return a?n.createElement(f,r(r({ref:t},u),{},{components:a})):n.createElement(f,r({ref:t},u))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},15824:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(87462),l=(a(67294),a(3905));const i={id:"Config",title:"Config"},r="Class Config",o={unversionedId:"reference/Mirage.SocketLayer/Config",id:"reference/Mirage.SocketLayer/Config",title:"Config",description:"Inheritance",source:"@site/docs/reference/Mirage.SocketLayer/Config.md",sourceDirName:"reference/Mirage.SocketLayer",slug:"/reference/Mirage.SocketLayer/Config",permalink:"/Mirage/docs/reference/Mirage.SocketLayer/Config",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/reference/Mirage.SocketLayer/Config.md",tags:[],version:"current",frontMatter:{id:"Config",title:"Config"},sidebar:"api",previous:{title:"Commands",permalink:"/Mirage/docs/reference/Mirage.SocketLayer/Commands"},next:{title:"ConnectionExtensions",permalink:"/Mirage/docs/reference/Mirage.SocketLayer/ConnectionExtensions"}},c={},s=[{value:"Inheritance",id:"inheritance",level:5},{value:"Inherited Members",id:"inherited-members",level:5},{value:"Syntax",id:"syntax",level:5},{value:"Fields",id:"fields",level:3},{value:"MaxConnections",id:"maxconnections",level:4},{value:"Declaration",id:"declaration",level:5},{value:"ConnectAttemptInterval",id:"connectattemptinterval",level:4},{value:"Declaration",id:"declaration-1",level:5},{value:"MaxConnectAttempts",id:"maxconnectattempts",level:4},{value:"Declaration",id:"declaration-2",level:5},{value:"KeepAliveInterval",id:"keepaliveinterval",level:4},{value:"Declaration",id:"declaration-3",level:5},{value:"TimeoutDuration",id:"timeoutduration",level:4},{value:"Declaration",id:"declaration-4",level:5},{value:"key",id:"key",level:4},{value:"Declaration",id:"declaration-5",level:5},{value:"DisconnectDuration",id:"disconnectduration",level:4},{value:"Declaration",id:"declaration-6",level:5},{value:"BufferPoolStartSize",id:"bufferpoolstartsize",level:4},{value:"Declaration",id:"declaration-7",level:5},{value:"BufferPoolMaxSize",id:"bufferpoolmaxsize",level:4},{value:"Declaration",id:"declaration-8",level:5},{value:"TimeBeforeEmptyAck",id:"timebeforeemptyack",level:4},{value:"Declaration",id:"declaration-9",level:5},{value:"ReceivesBeforeEmptyAck",id:"receivesbeforeemptyack",level:4},{value:"Declaration",id:"declaration-10",level:5},{value:"EmptyAckLimit",id:"emptyacklimit",level:4},{value:"Declaration",id:"declaration-11",level:5},{value:"MaxReliablePacketsInSendBufferPerConnection",id:"maxreliablepacketsinsendbufferperconnection",level:4},{value:"Declaration",id:"declaration-12",level:5},{value:"SequenceSize",id:"sequencesize",level:4},{value:"Declaration",id:"declaration-13",level:5},{value:"MaxReliableFragments",id:"maxreliablefragments",level:4},{value:"Declaration",id:"declaration-14",level:5},{value:"DisableReliableLayer",id:"disablereliablelayer",level:4},{value:"Declaration",id:"declaration-15",level:5}],u={toc:s};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"class-config"},"Class Config"),(0,l.kt)("div",{class:"inheritance"},(0,l.kt)("h5",{id:"inheritance"},"Inheritance"),(0,l.kt)("div",{class:"level",style:{"--data-index":0}},"System.Object")),(0,l.kt)("h5",{id:"inherited-members"},"Inherited Members"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Show")),(0,l.kt)("h5",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public class Config\n")),(0,l.kt)("h3",{id:"fields"},"Fields"),(0,l.kt)("h4",{id:"maxconnections"},"MaxConnections"),(0,l.kt)("p",null,"Max concurrent connections server will accept"),(0,l.kt)("h5",{id:"declaration"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int MaxConnections\n")),(0,l.kt)("h4",{id:"connectattemptinterval"},"ConnectAttemptInterval"),(0,l.kt)("p",null,"How often connect attempt message will be re-sent if server does not reply"),(0,l.kt)("h5",{id:"declaration-1"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public float ConnectAttemptInterval\n")),(0,l.kt)("h4",{id:"maxconnectattempts"},"MaxConnectAttempts"),(0,l.kt)("p",null,"How many times attempt to connect before giving up"),(0,l.kt)("h5",{id:"declaration-2"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int MaxConnectAttempts\n")),(0,l.kt)("h4",{id:"keepaliveinterval"},"KeepAliveInterval"),(0,l.kt)("p",null,"how long after previous send before sending keep alive message\nKeep alive is to stop connection from timing out\nkeep alive is sent over unreliable so this interval should be low enough so that  does not timeout if some unreliable packets are missed "),(0,l.kt)("h5",{id:"declaration-3"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public float KeepAliveInterval\n")),(0,l.kt)("h4",{id:"timeoutduration"},"TimeoutDuration"),(0,l.kt)("p",null,"how long without a message before disconnecting connection"),(0,l.kt)("h5",{id:"declaration-4"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public float TimeoutDuration\n")),(0,l.kt)("h4",{id:"key"},"key"),(0,l.kt)("p",null,"Key sent with connection message (defaults to Major version of assmebly)\nUsed to validate that server and client are same application/version\nNOTE: key will be ASCII encoded"),(0,l.kt)("h5",{id:"declaration-5"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public string key\n")),(0,l.kt)("h4",{id:"disconnectduration"},"DisconnectDuration"),(0,l.kt)("p",null,"How long after disconnect before connection is fully removed from Peer"),(0,l.kt)("h5",{id:"declaration-6"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public float DisconnectDuration\n")),(0,l.kt)("h4",{id:"bufferpoolstartsize"},"BufferPoolStartSize"),(0,l.kt)("p",null,"How many buffers to create at start"),(0,l.kt)("h5",{id:"declaration-7"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int BufferPoolStartSize\n")),(0,l.kt)("h4",{id:"bufferpoolmaxsize"},"BufferPoolMaxSize"),(0,l.kt)("p",null,"max number of buffers allowed to be stored in pool\nbuffers over this limit will be left for GC"),(0,l.kt)("h5",{id:"declaration-8"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int BufferPoolMaxSize\n")),(0,l.kt)("h4",{id:"timebeforeemptyack"},"TimeBeforeEmptyAck"),(0,l.kt)("p",null,"how long after last send to send ack without a message"),(0,l.kt)("h5",{id:"declaration-9"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public float TimeBeforeEmptyAck\n")),(0,l.kt)("h4",{id:"receivesbeforeemptyack"},"ReceivesBeforeEmptyAck"),(0,l.kt)("p",null,"How many receives before sending an empty ack\nthis is so that acks are still sent even if receives many message before replying"),(0,l.kt)("h5",{id:"declaration-10"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int ReceivesBeforeEmptyAck\n")),(0,l.kt)("h4",{id:"emptyacklimit"},"EmptyAckLimit"),(0,l.kt)("p",null,"How many empty acks to send via\nSend enough acks that there is a high chances that 1 of them reaches other size\nEmpty Ack count resets after receives new message"),(0,l.kt)("h5",{id:"declaration-11"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int EmptyAckLimit\n")),(0,l.kt)("h4",{id:"maxreliablepacketsinsendbufferperconnection"},"MaxReliablePacketsInSendBufferPerConnection"),(0,l.kt)("p",null,"How many packets can exist it ring buffers for Ack and Reliable system\nThis value wont count null packets so can be set lower than ","'","s value to limit actual number of packets waiting to be acked\nExample: (max=2000) ",(0,l.kt)("em",{parentName:"p"}," (MTU=1200) ")," (connections=100) => 240MB"),(0,l.kt)("h5",{id:"declaration-12"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int MaxReliablePacketsInSendBufferPerConnection\n")),(0,l.kt)("h4",{id:"sequencesize"},"SequenceSize"),(0,l.kt)("p",null,"Bit size of sequence used for AckSystem\nthis value also determines the size of ring buffers for Ack and Reliable system\nMax of 16"),(0,l.kt)("h5",{id:"declaration-13"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int SequenceSize\n")),(0,l.kt)("h4",{id:"maxreliablefragments"},"MaxReliableFragments"),(0,l.kt)("p",null,"How many fragments large reliable message can be split into\nif set to 0 then messages over  will not be allowed to be sent\nmax value is 255"),(0,l.kt)("h5",{id:"declaration-14"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public int MaxReliableFragments\n")),(0,l.kt)("h4",{id:"disablereliablelayer"},"DisableReliableLayer"),(0,l.kt)("p",null,"Enable if the Socket you are using has its own Reliable layer. For example using Websocket, which is TCP."),(0,l.kt)("h5",{id:"declaration-15"},"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public bool DisableReliableLayer\n")))}d.isMDXComponent=!0}}]);