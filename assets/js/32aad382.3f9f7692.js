"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[7218],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>b});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(r),b=i,m=d["".concat(u,".").concat(b)]||d[b]||p[b]||a;return r?n.createElement(m,l(l({ref:t},s),{},{components:r})):n.createElement(m,l({ref:t},s))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},98912:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const a={id:"BitCountAttribute",title:"BitCountAttribute"},l="Class BitCountAttribute",o={unversionedId:"reference/Mirage.Serialization/BitCountAttribute",id:"reference/Mirage.Serialization/BitCountAttribute",title:"BitCountAttribute",description:"Tells weaver how many bits to sue for field",source:"@site/docs/reference/Mirage.Serialization/BitCountAttribute.md",sourceDirName:"reference/Mirage.Serialization",slug:"/reference/Mirage.Serialization/BitCountAttribute",permalink:"/Mirage/docs/reference/Mirage.Serialization/BitCountAttribute",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/reference/Mirage.Serialization/BitCountAttribute.md",tags:[],version:"current",frontMatter:{id:"BitCountAttribute",title:"BitCountAttribute"},sidebar:"api",previous:{title:"AnglePacker",permalink:"/Mirage/docs/reference/Mirage.Serialization/AnglePacker"},next:{title:"BitCountFromRangeAttribute",permalink:"/Mirage/docs/reference/Mirage.Serialization/BitCountFromRangeAttribute"}},u={},c=[{value:"Inheritance",id:"inheritance",level:5},{value:"Inherited Members",id:"inherited-members",level:5},{value:"Syntax",id:"syntax",level:5},{value:"Constructors",id:"constructors",level:3},{value:"BitCountAttribute(Int32)",id:"bitcountattributeint32",level:4},{value:"Declaration",id:"declaration",level:5},{value:"Parameters",id:"parameters",level:5}],s={toc:c};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"class-bitcountattribute"},"Class BitCountAttribute"),(0,i.kt)("p",null,"Tells weaver how many bits to sue for field\nOnly works with integer fields (byte, int, ulong, enums etc)"),(0,i.kt)("p",null,"NOTE: bits are truncated when using this, so signed values will lose their sign. Use  as well if value might be negative"),(0,i.kt)("p",null,"Also See: Bit Packing Documentation"),(0,i.kt)("div",{class:"inheritance"},(0,i.kt)("h5",{id:"inheritance"},"Inheritance"),(0,i.kt)("div",{class:"level",style:{"--data-index":0}},"System.Object"),(0,i.kt)("div",{class:"level",style:{"--data-index":1}},"System.Attribute")),(0,i.kt)("h5",{id:"inherited-members"},"Inherited Members"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Show")),(0,i.kt)("h5",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)]\npublic class BitCountAttribute : Attribute, _Attribute\n")),(0,i.kt)("h3",{id:"constructors"},"Constructors"),(0,i.kt)("h4",{id:"bitcountattributeint32"},"BitCountAttribute(Int32)"),(0,i.kt)("h5",{id:"declaration"},"Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public BitCountAttribute(int bitCount)\n")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,i.kt)("td",{parentName:"tr",align:null},"bitCount"),(0,i.kt)("td",{parentName:"tr",align:null},"Value should be between 1 and 64")))))}p.isMDXComponent=!0}}]);