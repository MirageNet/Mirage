"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=a,k=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return n?r.createElement(k,o(o({ref:t},p),{},{components:n})):r.createElement(k,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},50690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:1,title:"Lifecycle"},o="Lifecycle of a GameObject",l={unversionedId:"guides/game-objects/lifecycle",id:"guides/game-objects/lifecycle",title:"Lifecycle",description:"Networked GameObjects go through several lifecycle states.",source:"@site/docs/guides/game-objects/lifecycle.md",sourceDirName:"guides/game-objects",slug:"/guides/game-objects/lifecycle",permalink:"/Mirage/docs/guides/game-objects/lifecycle",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/game-objects/lifecycle.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Lifecycle"},sidebar:"docs",previous:{title:"Networked Game Objects",permalink:"/Mirage/docs/guides/game-objects/"},next:{title:"Network Behaviour",permalink:"/Mirage/docs/guides/game-objects/network-behaviour"}},s={},d=[{value:"Spawning",id:"spawning",level:2},{value:"Destroying",id:"destroying",level:2},{value:"Server Instantiate",id:"server-instantiate",level:2},{value:"Server Start",id:"server-start",level:2},{value:"NetworkWorld onSpawn and onUnspawn",id:"networkworld-onspawn-and-onunspawn",level:2},{value:"Client Instantiate",id:"client-instantiate",level:2},{value:"Client Start Authority",id:"client-start-authority",level:2},{value:"Start Client",id:"start-client",level:2},{value:"Start Local Player",id:"start-local-player",level:2},{value:"Stop Authority",id:"stop-authority",level:2},{value:"Server Stop",id:"server-stop",level:2},{value:"Server Destroy",id:"server-destroy",level:2},{value:"Stop Client",id:"stop-client",level:2},{value:"Client Destroy",id:"client-destroy",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lifecycle-of-a-gameobject"},"Lifecycle of a GameObject"),(0,a.kt)("p",null,"Networked GameObjects go through several lifecycle states.\nYou can add custom logic to the object lifecycle events by subscribing to the corresponding event in ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity"},"NetworkIdentity")),(0,a.kt)("h2",{id:"spawning"},"Spawning"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Server"),(0,a.kt)("th",{parentName:"tr",align:null},"Client"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#server-instantiate"},"Instantiate")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#server-start"},"Start Server")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#networkworld-onspawn-and-onunspawn"},"NetworkWorld.onSpawn")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#client-instantiate"},"Instantiate"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#client-start-authority"},"StartAuthority"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#start-client"},"StartClient"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#start-local-player"},"StartLocalPlayer"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#networkworld-onspawn-and-onunspawn"},"NetworkWorld.onSpawn"))))),(0,a.kt)("h2",{id:"destroying"},"Destroying"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Server"),(0,a.kt)("th",{parentName:"tr",align:null},"Client"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#networkworld-onspawn-and-onunspawn"},"NetworkWorld.onUnspawn")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#stop-authority"},"StopAuthority"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#stop-client"},"StopClient"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#client-destroy"},"Destroy"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#networkworld-onspawn-and-onunspawn"},"NetworkWorld.onUnspawn"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#server-stop"},"StopServer")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#server-destroy"},"Destroy")),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In Mirror and UNet, you can add logic to lifecycle events by overriding methods in NetworkBehaviour.",(0,a.kt)("br",{parentName:"p"}),"\n","In Mirage you do it by subscribing to events in ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity"},"NetworkIdentity"))),(0,a.kt)("h2",{id:"server-instantiate"},"Server Instantiate"),(0,a.kt)("p",null,"This is usually done by you using Unity's ",(0,a.kt)("inlineCode",{parentName:"p"},"GameObject.Instantiate"),"\nThis goes through the regular GameObject Lifecycle events such as Awake, Start, Enabled, etc...\nBasically this is outside Mirage's control."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/scene-objects"},"Scene Objects")," are normally instantiated as part of the scene."),(0,a.kt)("h2",{id:"server-start"},"Server Start"),(0,a.kt)("p",null,"To start a server object, ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/spawn-object"},"spawn it"),". If you wish to perform some logic when the object starts in the server, add a component in your gameObject with our own method and subscribe to ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onstartserver"},"NetworkIdentity.OnStartServer")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class MyComponent : MonoBehaviour\n{\n    public void Awake() \n    {\n        GetComponent<NetworkIdentity>.OnStartServer.AddListener(OnStartServer);\n    }\n\n    public void OnStartServer() \n    {\n        Debug.Log("The object started on the server")\n    }\n}\n')),(0,a.kt)("p",null,"You can also simply drag your ",(0,a.kt)("inlineCode",{parentName:"p"},"OnStartServer")," method in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onstartserver"},"NetworkIdentity.OnStartServer")," event in the inspector."),(0,a.kt)("p",null,"During the spawn, a message will be sent to all the clients telling them to spawn the object. The message\nwill include all the data in ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-var"},"SyncVars"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-objects/sync-list"},"SyncLists"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-objects/sync-hash-set"},"SyncHashSet"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-objects/sync-dictionary"},"SyncDictionary")),(0,a.kt)("h2",{id:"networkworld-onspawn-and-onunspawn"},"NetworkWorld onSpawn and onUnspawn"),(0,a.kt)("p",null,"The NetworkWorld class is what holds the list of all spawned Identities. This class is used for both server and client, and can be found on ",(0,a.kt)("inlineCode",{parentName:"p"},"NetworkServer.World")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NetworkClient.World"),"."),(0,a.kt)("p",null,"NetworkWorld has event that are called when Network objects are spawned or unspawn, they can be used when you need to do this on all network objects, but dont want to add listeners to each one individually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class MyComponent : MonoBehaviour  \n{\n    public NetworkServer Server;\n    public NetworkClient Client;\n\n    public void Awake() \n    {\n        // Client/Server.World is only set after server is started, \n        // so wait for start, then add event listener to OnSpawn\n        Server.Started.AddListener(ServerStarted);\n        Client.Started.AddListener(ClientStarted);\n    }\n\n    private void ServerStarted() \n    {\n        Server.World.onSpawn += OnServerSpawn;\n        Server.World.onUnspawn += OnServerUnspawn;\n    }\n    private void OnServerSpawn(NetworkIdentity identity) \n    {\n        Debug.Log($"The object {identity} was spawned on the server");\n    }\n    private void OnServerUnspawn(NetworkIdentity identity) \n    {\n        Debug.Log($"The object {identity} was unspawned on the server");\n    }\n\n    private void ClientStarted() \n    {\n        Client.World.onSpawn += OnClientSpawn;\n        Client.World.onUnspawn += OnClientUnspawn;\n    }\n    private void OnClientSpawn(NetworkIdentity identity) \n    {\n        Debug.Log($"The object {identity} was spawned on the client");\n    }\n    private void OnClientUnspawn(NetworkIdentity identity) \n    {\n        Debug.Log($"The object {identity} was unspawned on the client");\n    }\n}\n')),(0,a.kt)("h2",{id:"client-instantiate"},"Client Instantiate"),(0,a.kt)("p",null,"When an object is spawned,  the server will send a message to the clients telling it to spawn a GameObject and provide\nan asset id."),(0,a.kt)("p",null,"By default, Mirage will look up all the known prefabs looking for that asset id.",(0,a.kt)("br",{parentName:"p"}),"\n","Make sure to add your prefabs to the NetworkClient list of prefabs.\nThen Mirage will instantiate the prefab,  and it will go through the regular Unity Lifecycle events.\nYou can customize how objects are instantiated using Spawn Handlers."),(0,a.kt)("p",null,"Do not add Network logic to these events.  Instead,  use these events to subscribe to network events in NetworkIdentity."),(0,a.kt)("p",null,"Immediately after the object is instantiated, all the data is updated to match the data in the server."),(0,a.kt)("h2",{id:"client-start-authority"},"Client Start Authority"),(0,a.kt)("p",null,"If the object is owned by this client, then NetworkIdentity will invoke the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onauthoritychanged"},"NetworkIdentity.OnAuthorityChanged"),"\nSubscribe to this event either by using ",(0,a.kt)("inlineCode",{parentName:"p"},"AddListener"),",  or adding your method to the event in the inspector.\nNote the Authority can be revoked, and granted again.  Every time the client gains authority, this event will be invoked again."),(0,a.kt)("h2",{id:"start-client"},"Start Client"),(0,a.kt)("p",null,"The event ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onstartclient"},"NetworkIdentity.OnStartClient")," will be invoked.\nSubscribe to this event by using ",(0,a.kt)("inlineCode",{parentName:"p"},"AddListener")," or adding your method in the event in the inspector"),(0,a.kt)("h2",{id:"start-local-player"},"Start Local Player"),(0,a.kt)("p",null,"If the object spawned is the ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/spawn-player"},"character object"),",  the event ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onstartlocalplayer"},"NetworkIdentity.OnStartLocalPlayer"),"\nis invoked.\nSubscribe to this event by using ",(0,a.kt)("inlineCode",{parentName:"p"},"AddListener")," or adding your method in the event in the inspector"),(0,a.kt)("h2",{id:"stop-authority"},"Stop Authority"),(0,a.kt)("p",null,"If the object loses authority over the object, then NetworkIdentity will invoke the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onauthoritychanged"},"NetworkIdentity.OnAuthorityChanged"),"\nSubscribe to this event either by using ",(0,a.kt)("inlineCode",{parentName:"p"},"AddListener"),",  or adding your method to the event in the inspector.\nNote the Authority can be revoked, and granted again.  Every time the client loses authority, this event will be invoked again."),(0,a.kt)("h2",{id:"server-stop"},"Server Stop"),(0,a.kt)("p",null,"Either because the client disconnected, the server stopped,\nyou called ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/ServerObjectManager#destroygameobject-boolean"},(0,a.kt)("inlineCode",{parentName:"a"},"ServerObjectManager.Destroy(GameObject, Boolean)"))," the object may stop in the server.\nDuring this state, a message is sent to all the clients to unspawn the object.\nThe event ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onstopserver"},"NetworkIdentity.OnStopServer")," will be invoked. "),(0,a.kt)("p",null,"Subscribe to this event either by using ",(0,a.kt)("inlineCode",{parentName:"p"},"AddListener"),", or by adding your method to the event in the inspector."),(0,a.kt)("h2",{id:"server-destroy"},"Server Destroy"),(0,a.kt)("p",null,"By default, the server will call ",(0,a.kt)("inlineCode",{parentName:"p"},"GameObject.Destroy")," to destroy the object.",(0,a.kt)("br",{parentName:"p"}),"\n","Note that if it is a ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/scene-objects"},"Scene Object")," the server will invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"GameObject.SetActive(false)")," instead.  "),(0,a.kt)("p",null,"The regular unity lifecycle events apply."),(0,a.kt)("p",null,"Note that the server will destroy the object, and will not wait for the clients to unspawn their objects."),(0,a.kt)("h2",{id:"stop-client"},"Stop Client"),(0,a.kt)("p",null,"This can be triggered either because the client received an Unspawn message or the client was disconnected\nThe event ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkIdentity#onstopclient"},"NetworkIdentity.OnStopClient")," will be invoked.",(0,a.kt)("br",{parentName:"p"}),"\n","Subscribe to this event either by using ",(0,a.kt)("inlineCode",{parentName:"p"},"AddListener"),", or by adding your method to the event in the inspector."),(0,a.kt)("p",null,"Use it to clean up any network-related resource used by this object."),(0,a.kt)("h2",{id:"client-destroy"},"Client Destroy"),(0,a.kt)("p",null,"After an object is stopped on the client,  by default unity will call ",(0,a.kt)("inlineCode",{parentName:"p"},"GameObject.Destroy")," if it is a prefab ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/spawn-object"},"Spawned Object"),"\nOr it will call ",(0,a.kt)("inlineCode",{parentName:"p"},"GameObject.SetActive(false)")," if it is a ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/scene-objects"},"Scene Object"),"\nYou can customize how objects are destroying using Spawn Handlers"),(0,a.kt)("p",null,"The normal Unity lifecycle events still apply."))}c.isMDXComponent=!0}}]);