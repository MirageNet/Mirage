"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[2611],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),u=i,m=d["".concat(s,".").concat(u)]||d[u]||y[u]||r;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},40357:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_position:2},o="Sync Dictionary",c={unversionedId:"guides/sync/sync-objects/sync-dictionary",id:"guides/sync/sync-objects/sync-dictionary",title:"Sync Dictionary",description:"SyncDictionary is an associative array containing an unordered list of key, value pairs. Keys and values can be any of Mirage supported types.",source:"@site/docs/guides/sync/sync-objects/sync-dictionary.md",sourceDirName:"guides/sync/sync-objects",slug:"/guides/sync/sync-objects/sync-dictionary",permalink:"/Mirage/docs/guides/sync/sync-objects/sync-dictionary",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/sync/sync-objects/sync-dictionary.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Sync List",permalink:"/Mirage/docs/guides/sync/sync-objects/sync-list"},next:{title:"Sync Hash Set",permalink:"/Mirage/docs/guides/sync/sync-objects/sync-hash-set"}},s={},l=[{value:"Usage",id:"usage",level:2},{value:"Basic example",id:"basic-example",level:3},{value:"Callbacks",id:"callbacks",level:2},{value:"Example",id:"example",level:3}],p={toc:l};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sync-dictionary"},"Sync Dictionary"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage.Collections/SyncDictionary-2"},(0,i.kt)("inlineCode",{parentName:"a"},"SyncDictionary"))," is an associative array containing an unordered list of key, value pairs. Keys and values can be any of ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/serialization/data-types"},"Mirage supported types"),"."),(0,i.kt)("p",null,"SyncDictionary works much like ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-objects/sync-list"},"SyncLists"),": when you make a change on the server, the change is propagated to all clients and the appropriate callback is called."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Add a field of type ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage.Collections/SyncDictionary-2"},"SyncDictionary")," on any ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"TKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TValue")," can be any supported Mirage type and initialize it."),(0,i.kt)("admonition",{title:"IMPORTANT",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You need to initialize the SyncDictionary immediately after the definition for them to work. You can mark them as ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," to enforce proper usage.")),(0,i.kt)("h3",{id:"basic-example"},"Basic example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'using UnityEngine;\nusing Mirage;\nusing Mirage.Collections;\n\n[System.Serializable]\npublic struct Item\n{\n    public string name;\n    public int hitPoints;\n    public int durability;\n}\n\npublic class Player : NetworkBehaviour\n{\n    public readonly SyncDictionary<stirng, Item> equipment = new SyncDictionary<string, Item>();\n\n    private void Awake() \n    {\n        Identity.OnStartServer.AddListener(OnStartServer);\n    }\n\n    private void OnStartServer()\n    {\n        equipment.Add("head", new Item { name = "Helmet", hitPoints = 10, durability = 20 });\n        equipment.Add("body", new Item { name = "Epic Armor", hitPoints = 50, durability = 50 });\n        equipment.Add("feet", new Item { name = "Sneakers", hitPoints = 3, durability = 40 });\n        equipment.Add("hands", new Item { name = "Sword", hitPoints = 30, durability = 15 });\n    }\n}\n')),(0,i.kt)("h2",{id:"callbacks"},"Callbacks"),(0,i.kt)("p",null,"You can detect when a SyncDictionary changes on the client and/or server. This is especially useful for refreshing your UI, character appearance, etc."),(0,i.kt)("p",null,"There are different callbacks for different operations, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"OnChange")," (any change to the dictionary), ",(0,i.kt)("inlineCode",{parentName:"p"},"OnInsert")," (adding a new element), etc. Please check the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage.Collections/SyncDictionary-2"},"SyncDictionary API reference")," for the complete list of callbacks."),(0,i.kt)("p",null,"Depending on where you want to invoke the callbacks, you can use these methods to register them:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Awake")," for both client and server"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Identity.OnStartServer")," event for server-only"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Identity.OnStartClient")," event for client-only")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"By the time you subscribe, the dictionary will already be initialized, so you will not get a call for the initial data, only updates.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using Mirage;\nusing Mirage.Collections;\n\npublic class Player : NetworkBehaviour \n{\n    public readonly SyncDictionary<stirng, Item> equipment = new SyncDictionary<string, Item>();\n    public readonly SyncDictionary<stirng, Item> hotbar = new SyncDictionary<string, Item>();\n\n    // This will hook the callback on both server and client\n    private void Awake()\n    {\n        equipment.OnChange += UpdateEquipment;\n        Identity.OnStartClient.AddListener(OnStartClient);\n    }\n\n    // Hotbar changes will only be invoked on clients\n    private void OnStartClient() \n    {\n        hotbar.OnChange += UpdateHotbar;\n    }\n\n    private void UpdateEquipment()\n    {\n        // Here you can refresh your UI for instance\n    }\n\n    private void UpdateHotbar()\n    {\n        // Here you can refresh your UI for instance\n    }\n}\n")),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"SyncDictionary")," uses a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=netstandard-2.0"},(0,i.kt)("inlineCode",{parentName:"a"},"Dictionary"))," to store its data. If you want to use a different dictionary implementation, add a constructor and pass the dictionary implementation to the parent constructor. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public SyncDictionary<string, Item> myDict = new SyncIDictionary<string, Item>(new MyDictionary<string, Item>());\n")))}y.isMDXComponent=!0}}]);