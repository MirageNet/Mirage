"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[1853],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),d=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),k=d(a),m=n,u=k["".concat(p,".").concat(m)]||k[m]||c[m]||l;return a?r.createElement(u,i(i({ref:t},s),{},{components:a})):r.createElement(u,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},36755:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=a(87462),n=(a(67294),a(3905));const l={id:"ServerObjectManager",title:"ServerObjectManager"},i="Class ServerObjectManager",o={unversionedId:"reference/Mirage/ServerObjectManager",id:"reference/Mirage/ServerObjectManager",title:"ServerObjectManager",description:"The ServerObjectManager.",source:"@site/docs/reference/Mirage/ServerObjectManager.md",sourceDirName:"reference/Mirage",slug:"/reference/Mirage/ServerObjectManager",permalink:"/Mirage/docs/reference/Mirage/ServerObjectManager",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/reference/Mirage/ServerObjectManager.md",tags:[],version:"current",frontMatter:{id:"ServerObjectManager",title:"ServerObjectManager"},sidebar:"api",previous:{title:"ServerAttribute",permalink:"/Mirage/docs/reference/Mirage/ServerAttribute"},next:{title:"ServerObjectManagerExtensions",permalink:"/Mirage/docs/reference/Mirage/ServerObjectManagerExtensions"}},p={},d=[{value:"Inheritance",id:"inheritance",level:5},{value:"Syntax",id:"syntax",level:5},{value:"Fields",id:"fields",level:3},{value:"NetIdGenerator",id:"netidgenerator",level:4},{value:"Declaration",id:"declaration",level:5},{value:"Properties",id:"properties",level:3},{value:"Server",id:"server",level:4},{value:"Declaration",id:"declaration-1",level:5},{value:"DefaultVisibility",id:"defaultvisibility",level:4},{value:"Declaration",id:"declaration-2",level:5},{value:"Methods",id:"methods",level:3},{value:"ReplaceCharacter(INetworkPlayer, NetworkIdentity, Int32, Boolean)",id:"replacecharacterinetworkplayer-networkidentity-int32-boolean",level:4},{value:"Declaration",id:"declaration-3",level:5},{value:"Parameters",id:"parameters",level:5},{value:"ReplaceCharacter(INetworkPlayer, NetworkIdentity, Boolean)",id:"replacecharacterinetworkplayer-networkidentity-boolean",level:4},{value:"Declaration",id:"declaration-4",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"AddCharacter(INetworkPlayer, NetworkIdentity, Int32)",id:"addcharacterinetworkplayer-networkidentity-int32",level:4},{value:"Declaration",id:"declaration-5",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"AddCharacter(INetworkPlayer, NetworkIdentity)",id:"addcharacterinetworkplayer-networkidentity",level:4},{value:"Declaration",id:"declaration-6",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"RemoveCharacter(INetworkPlayer, Boolean)",id:"removecharacterinetworkplayer-boolean",level:4},{value:"Declaration",id:"declaration-7",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"DestroyCharacter(INetworkPlayer, Boolean)",id:"destroycharacterinetworkplayer-boolean",level:4},{value:"Declaration",id:"declaration-8",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"Spawn(NetworkIdentity, Int32, INetworkPlayer)",id:"spawnnetworkidentity-int32-inetworkplayer",level:4},{value:"Declaration",id:"declaration-9",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"Spawn(NetworkIdentity, INetworkPlayer)",id:"spawnnetworkidentity-inetworkplayer",level:4},{value:"Declaration",id:"declaration-10",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Spawn(NetworkIdentity)",id:"spawnnetworkidentity",level:4},{value:"Declaration",id:"declaration-11",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Destroy(GameObject, Boolean)",id:"destroygameobject-boolean",level:4},{value:"Declaration",id:"declaration-12",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Destroy(NetworkIdentity, Boolean)",id:"destroynetworkidentity-boolean",level:4},{value:"Declaration",id:"declaration-13",level:5},{value:"Parameters",id:"parameters-10",level:5},{value:"SpawnSceneObjects()",id:"spawnsceneobjects",level:4},{value:"Declaration",id:"declaration-14",level:5},{value:"SpawnVisibleObjects(INetworkPlayer)",id:"spawnvisibleobjectsinetworkplayer",level:4},{value:"Declaration",id:"declaration-15",level:5},{value:"Parameters",id:"parameters-11",level:5},{value:"SpawnVisibleObjects(INetworkPlayer, Boolean)",id:"spawnvisibleobjectsinetworkplayer-boolean",level:4},{value:"Declaration",id:"declaration-16",level:5},{value:"Parameters",id:"parameters-12",level:5},{value:"SpawnVisibleObjects(INetworkPlayer, NetworkIdentity)",id:"spawnvisibleobjectsinetworkplayer-networkidentity",level:4},{value:"Declaration",id:"declaration-17",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:"SpawnVisibleObjects(INetworkPlayer, Boolean, NetworkIdentity)",id:"spawnvisibleobjectsinetworkplayer-boolean-networkidentity",level:4},{value:"Declaration",id:"declaration-18",level:5},{value:"Parameters",id:"parameters-14",level:5},{value:"SpawnVisibleObjects(INetworkPlayer, Boolean, HashSet&lt;NetworkIdentity&gt;)",id:"spawnvisibleobjectsinetworkplayer-boolean-hashsetnetworkidentity",level:4},{value:"Declaration",id:"declaration-19",level:5},{value:"Parameters",id:"parameters-15",level:5}],s={toc:d};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"class-serverobjectmanager"},"Class ServerObjectManager"),(0,n.kt)("p",null,"The ServerObjectManager."),(0,n.kt)("div",{class:"inheritance"},(0,n.kt)("h5",{id:"inheritance"},"Inheritance"),(0,n.kt)("div",{class:"level",style:{"--data-index":0}},"System.Object")),(0,n.kt)("h5",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public class ServerObjectManager : MonoBehaviour\n")),(0,n.kt)("h3",{id:"fields"},"Fields"),(0,n.kt)("h4",{id:"netidgenerator"},"NetIdGenerator"),(0,n.kt)("h5",{id:"declaration"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public INetIdGenerator NetIdGenerator\n")),(0,n.kt)("h3",{id:"properties"},"Properties"),(0,n.kt)("h4",{id:"server"},"Server"),(0,n.kt)("h5",{id:"declaration-1"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkServer Server { get; }\n")),(0,n.kt)("h4",{id:"defaultvisibility"},"DefaultVisibility"),(0,n.kt)("h5",{id:"declaration-2"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public INetworkVisibility DefaultVisibility { get; }\n")),(0,n.kt)("h3",{id:"methods"},"Methods"),(0,n.kt)("h4",{id:"replacecharacterinetworkplayer-networkidentity-int32-boolean"},"ReplaceCharacter(INetworkPlayer, NetworkIdentity, Int32, Boolean)"),(0,n.kt)("p",null,"This replaces the player object for a connection with a different player object. The old player object is not destroyed.\nIf a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes."),(0,n.kt)("h5",{id:"declaration-3"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void ReplaceCharacter(INetworkPlayer player, NetworkIdentity character, int prefabHash, bool keepAuthority = false)\n")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"Connection which is adding the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null},"Player object spawned for the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"keepAuthority"),(0,n.kt)("td",{parentName:"tr",align:null},"Does the previous player remain attached to this connection?")))),(0,n.kt)("h4",{id:"replacecharacterinetworkplayer-networkidentity-boolean"},"ReplaceCharacter(INetworkPlayer, NetworkIdentity, Boolean)"),(0,n.kt)("p",null,"This replaces the player object for a connection with a different player object. The old player object is not destroyed.\nIf a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes."),(0,n.kt)("h5",{id:"declaration-4"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void ReplaceCharacter(INetworkPlayer player, NetworkIdentity identity, bool keepAuthority = false)\n")),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"Connection which is adding the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"identity"),(0,n.kt)("td",{parentName:"tr",align:null},"Player object spawned for the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"keepAuthority"),(0,n.kt)("td",{parentName:"tr",align:null},"Does the previous player remain attached to this connection?")))),(0,n.kt)("h4",{id:"addcharacterinetworkplayer-networkidentity-int32"},"AddCharacter(INetworkPlayer, NetworkIdentity, Int32)"),(0,n.kt)("p",null,"When  is received from a player, the server calls this to associate the character GameObject with the NetworkPlayer.\nWhen a character is added for a player the object is automatically spawned, so you do not need to call ServerObjectManager.Spawn for that object.\nThis function is used for adding a character, not replacing. If there is already a character then use  instead."),(0,n.kt)("h5",{id:"declaration-5"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void AddCharacter(INetworkPlayer player, NetworkIdentity character, int prefabHash)\n")),(0,n.kt)("h5",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"the Player to add the character to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null},"The Network Object to add to the Player. Can be spawned or unspawned. Calling this method will respawn it.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null},"New prefab hash to give to the player, used for dynamically creating objects at runtime.")))),(0,n.kt)("h4",{id:"addcharacterinetworkplayer-networkidentity"},"AddCharacter(INetworkPlayer, NetworkIdentity)"),(0,n.kt)("p",null,"When  is received from a player, the server calls this to associate the character GameObject with the NetworkPlayer.\nWhen a character is added for a player the object is automatically spawned, so you do not need to call ServerObjectManager.Spawn for that object.\nThis function is used for adding a character, not replacing. If there is already a character then use  instead."),(0,n.kt)("h5",{id:"declaration-6"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void AddCharacter(INetworkPlayer player, NetworkIdentity identity)\n")),(0,n.kt)("h5",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"the Player to add the character to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"identity"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"removecharacterinetworkplayer-boolean"},"RemoveCharacter(INetworkPlayer, Boolean)"),(0,n.kt)("p",null,"Removes the character from a player, with the option to keep the player as the owner of the object"),(0,n.kt)("h5",{id:"declaration-7"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void RemoveCharacter(INetworkPlayer player, bool keepAuthority = false)\n")),(0,n.kt)("h5",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"keepAuthority"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"destroycharacterinetworkplayer-boolean"},"DestroyCharacter(INetworkPlayer, Boolean)"),(0,n.kt)("p",null,"Removes and destroys the character from a player"),(0,n.kt)("h5",{id:"declaration-8"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void DestroyCharacter(INetworkPlayer player, bool destroyServerObject = true)\n")),(0,n.kt)("h5",{id:"parameters-5"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"destroyServerObject"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"spawnnetworkidentity-int32-inetworkplayer"},"Spawn(NetworkIdentity, Int32, INetworkPlayer)"),(0,n.kt)("p",null,"Assigns prefabHash to the identity and then spawns it with owner"),(0,n.kt)("p",null," can only be set to a non-zero value."),(0,n.kt)("p",null," will be cleared when calling this method, this will ensure that the object is spawned using the new PrefabHash rather than SceneId"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"This method is useful if you are creating network objects at runtime and both server and client know what  to set on an object\n")),(0,n.kt)("h5",{id:"declaration-9"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void Spawn(NetworkIdentity identity, int prefabHash, INetworkPlayer owner = null)\n")),(0,n.kt)("h5",{id:"parameters-6"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"identity"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null},"The prefabHash of the object to spawn. Used for custom spawn handlers.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"owner"),(0,n.kt)("td",{parentName:"tr",align:null},"The connection that has authority over the object")))),(0,n.kt)("h4",{id:"spawnnetworkidentity-inetworkplayer"},"Spawn(NetworkIdentity, INetworkPlayer)"),(0,n.kt)("p",null,"Spawns the identity and keeping owner as "),(0,n.kt)("h5",{id:"declaration-10"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void Spawn(NetworkIdentity identity, INetworkPlayer owner)\n")),(0,n.kt)("h5",{id:"parameters-7"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"identity"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"owner"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"spawnnetworkidentity"},"Spawn(NetworkIdentity)"),(0,n.kt)("p",null,"Spawns the identity and assigns owner to be it","'","s owner"),(0,n.kt)("h5",{id:"declaration-11"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void Spawn(NetworkIdentity identity)\n")),(0,n.kt)("h5",{id:"parameters-8"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"identity"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"destroygameobject-boolean"},"Destroy(GameObject, Boolean)"),(0,n.kt)("p",null,"Destroys this object and corresponding objects on all clients.\nGame object to destroy.\nSets if server object will also be destroyed"),(0,n.kt)("h5",{id:"declaration-12"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void Destroy(GameObject gameObject, bool destroyServerObject = true)\n")),(0,n.kt)("h5",{id:"parameters-9"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"gameObject"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"destroyServerObject"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"destroynetworkidentity-boolean"},"Destroy(NetworkIdentity, Boolean)"),(0,n.kt)("p",null,"Destroys this object and corresponding objects on all clients.\nGame object to destroy.\nSets if server object will also be destroyed"),(0,n.kt)("h5",{id:"declaration-13"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void Destroy(NetworkIdentity identity, bool destroyServerObject = true)\n")),(0,n.kt)("h5",{id:"parameters-10"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"identity"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"destroyServerObject"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"spawnsceneobjects"},"SpawnSceneObjects()"),(0,n.kt)("p",null,"This causes NetworkIdentity objects in a scene to be spawned on a server."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Calling SpawnObjects() causes all scene objects to be spawned.\nIt is like calling Spawn() for each of them.\n")),(0,n.kt)("h5",{id:"declaration-14"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void SpawnSceneObjects()\n")),(0,n.kt)("h4",{id:"spawnvisibleobjectsinetworkplayer"},"SpawnVisibleObjects(INetworkPlayer)"),(0,n.kt)("p",null,"Sends spawn message for scene objects and other visible objects to the given player if it has a character"),(0,n.kt)("p",null,"If there is a  then this will be called after the client finishes loading the scene and sends "),(0,n.kt)("h5",{id:"declaration-15"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void SpawnVisibleObjects(INetworkPlayer player)\n")),(0,n.kt)("h5",{id:"parameters-11"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"The player to spawn objects for")))),(0,n.kt)("h4",{id:"spawnvisibleobjectsinetworkplayer-boolean"},"SpawnVisibleObjects(INetworkPlayer, Boolean)"),(0,n.kt)("p",null,"Sends spawn message for scene objects and other visible objects to the given player if it has a character"),(0,n.kt)("h5",{id:"declaration-16"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void SpawnVisibleObjects(INetworkPlayer player, bool ignoreHasCharacter)\n")),(0,n.kt)("h5",{id:"parameters-12"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"The player to spawn objects for")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"ignoreHasCharacter"),(0,n.kt)("td",{parentName:"tr",align:null},"If true will spawn visibile objects even if player does not have a spawned character yet")))),(0,n.kt)("h4",{id:"spawnvisibleobjectsinetworkplayer-networkidentity"},"SpawnVisibleObjects(INetworkPlayer, NetworkIdentity)"),(0,n.kt)("p",null,"Sends spawn message for scene objects and other visible objects to the given player if it has a character"),(0,n.kt)("h5",{id:"declaration-17"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void SpawnVisibleObjects(INetworkPlayer player, NetworkIdentity skip)\n")),(0,n.kt)("h5",{id:"parameters-13"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"The player to spawn objects for")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"skip"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"spawnvisibleobjectsinetworkplayer-boolean-networkidentity"},"SpawnVisibleObjects(INetworkPlayer, Boolean, NetworkIdentity)"),(0,n.kt)("p",null,"Sends spawn message for scene objects and other visible objects to the given player if it has a character"),(0,n.kt)("h5",{id:"declaration-18"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void SpawnVisibleObjects(INetworkPlayer player, bool ignoreHasCharacter, NetworkIdentity skip)\n")),(0,n.kt)("h5",{id:"parameters-14"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"The player to spawn objects for")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"ignoreHasCharacter"),(0,n.kt)("td",{parentName:"tr",align:null},"If true will spawn visibile objects even if player does not have a spawned character yet")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"skip"),(0,n.kt)("td",{parentName:"tr",align:null},"NetworkIdentity to skip when spawning. Can be null")))),(0,n.kt)("h4",{id:"spawnvisibleobjectsinetworkplayer-boolean-hashsetnetworkidentity"},"SpawnVisibleObjects(INetworkPlayer, Boolean, HashSet","<","NetworkIdentity",">",")"),(0,n.kt)("p",null,"Sends spawn message for scene objects and other visible objects to the given player if it has a character"),(0,n.kt)("h5",{id:"declaration-19"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public void SpawnVisibleObjects(INetworkPlayer player, bool ignoreHasCharacter, HashSet<NetworkIdentity> skip)\n")),(0,n.kt)("h5",{id:"parameters-15"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"The player to spawn objects for")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"ignoreHasCharacter"),(0,n.kt)("td",{parentName:"tr",align:null},"If true will spawn visible objects even if player does not have a spawned character yet")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Collections.Generic.HashSet","<","Mirage.NetworkIdentity",">"),(0,n.kt)("td",{parentName:"tr",align:null},"skip"),(0,n.kt)("td",{parentName:"tr",align:null},"NetworkIdentity to skip when spawning. Can be null")))))}c.isMDXComponent=!0}}]);