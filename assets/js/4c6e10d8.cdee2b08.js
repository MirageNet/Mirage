"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[8682],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=c(a),k=n,b=s["".concat(p,".").concat(k)]||s[k]||m[k]||l;return a?r.createElement(b,i(i({ref:t},d),{},{components:a})):r.createElement(b,i({ref:t},d))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}s.displayName="MDXCreateElement"},32017:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const l={id:"ServerObjectManagerExtensions",title:"ServerObjectManagerExtensions"},i="Class ServerObjectManagerExtensions",o={unversionedId:"reference/Mirage/ServerObjectManagerExtensions",id:"reference/Mirage/ServerObjectManagerExtensions",title:"ServerObjectManagerExtensions",description:"Extra helper methods for  that dont add any extra logic",source:"@site/docs/reference/Mirage/ServerObjectManagerExtensions.md",sourceDirName:"reference/Mirage",slug:"/reference/Mirage/ServerObjectManagerExtensions",permalink:"/Mirage/docs/reference/Mirage/ServerObjectManagerExtensions",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/reference/Mirage/ServerObjectManagerExtensions.md",tags:[],version:"current",frontMatter:{id:"ServerObjectManagerExtensions",title:"ServerObjectManagerExtensions"},sidebar:"api",previous:{title:"ServerObjectManager",permalink:"/Mirage/docs/reference/Mirage/ServerObjectManager"},next:{title:"ServerRpcAttribute",permalink:"/Mirage/docs/reference/Mirage/ServerRpcAttribute"}},p={},c=[{value:"Inheritance",id:"inheritance",level:5},{value:"Inherited Members",id:"inherited-members",level:5},{value:"Syntax",id:"syntax",level:5},{value:"Methods",id:"methods",level:3},{value:"AddCharacter(ServerObjectManager, INetworkPlayer, GameObject, Int32)",id:"addcharacterserverobjectmanager-inetworkplayer-gameobject-int32",level:4},{value:"Declaration",id:"declaration",level:5},{value:"Parameters",id:"parameters",level:5},{value:"AddCharacter(ServerObjectManager, INetworkPlayer, GameObject)",id:"addcharacterserverobjectmanager-inetworkplayer-gameobject",level:4},{value:"Declaration",id:"declaration-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"ReplaceCharacter(ServerObjectManager, INetworkPlayer, GameObject, Boolean)",id:"replacecharacterserverobjectmanager-inetworkplayer-gameobject-boolean",level:4},{value:"Declaration",id:"declaration-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"ReplaceCharacter(ServerObjectManager, INetworkPlayer, GameObject, Int32, Boolean)",id:"replacecharacterserverobjectmanager-inetworkplayer-gameobject-int32-boolean",level:4},{value:"Declaration",id:"declaration-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"Spawn(ServerObjectManager, GameObject, GameObject)",id:"spawnserverobjectmanager-gameobject-gameobject",level:4},{value:"Declaration",id:"declaration-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"Spawn(ServerObjectManager, GameObject, Int32, INetworkPlayer)",id:"spawnserverobjectmanager-gameobject-int32-inetworkplayer",level:4},{value:"Declaration",id:"declaration-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"Spawn(ServerObjectManager, GameObject, INetworkPlayer)",id:"spawnserverobjectmanager-gameobject-inetworkplayer",level:4},{value:"Declaration",id:"declaration-6",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"SpawnInstantiate(ServerObjectManager, GameObject, Nullable&lt;Int32&gt;, INetworkPlayer)",id:"spawninstantiateserverobjectmanager-gameobject-nullableint32-inetworkplayer",level:4},{value:"Declaration",id:"declaration-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Returns",id:"returns",level:5},{value:"SpawnInstantiate(ServerObjectManager, NetworkIdentity, Nullable&lt;Int32&gt;, INetworkPlayer)",id:"spawninstantiateserverobjectmanager-networkidentity-nullableint32-inetworkplayer",level:4},{value:"Declaration",id:"declaration-8",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Returns",id:"returns-1",level:5}],d={toc:c};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"class-serverobjectmanagerextensions"},"Class ServerObjectManagerExtensions"),(0,n.kt)("p",null,"Extra helper methods for  that dont add any extra logic"),(0,n.kt)("div",{class:"inheritance"},(0,n.kt)("h5",{id:"inheritance"},"Inheritance"),(0,n.kt)("div",{class:"level",style:{"--data-index":0}},"System.Object")),(0,n.kt)("h5",{id:"inherited-members"},"Inherited Members"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Show")),(0,n.kt)("h5",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static class ServerObjectManagerExtensions\n")),(0,n.kt)("h3",{id:"methods"},"Methods"),(0,n.kt)("h4",{id:"addcharacterserverobjectmanager-inetworkplayer-gameobject-int32"},"AddCharacter(ServerObjectManager, INetworkPlayer, GameObject, Int32)"),(0,n.kt)("p",null,"When  is received from a player, the server calls this to associate the character GameObject with the NetworkPlayer.\nWhen a character is added for a player the object is automatically spawned, so you do not need to call ServerObjectManager.Spawn for that object.\nThis function is used for adding a character, not replacing. If there is already a character then use  instead."),(0,n.kt)("h5",{id:"declaration"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void AddCharacter(this ServerObjectManager som, INetworkPlayer player, GameObject character, int prefabHash)\n")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"the Player to add the character to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null},"The Network Object to add to the Player. Can be spawned or unspawned. Calling this method will respawn it.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null},"New prefab hash to give to the player, used for dynamically creating objects at runtime.")))),(0,n.kt)("h4",{id:"addcharacterserverobjectmanager-inetworkplayer-gameobject"},"AddCharacter(ServerObjectManager, INetworkPlayer, GameObject)"),(0,n.kt)("p",null,"When  is received from a player, the server calls this to associate the character GameObject with the NetworkPlayer.\nWhen a character is added for a player the object is automatically spawned, so you do not need to call ServerObjectManager.Spawn for that object.\nThis function is used for adding a character, not replacing. If there is already a character then use  instead."),(0,n.kt)("h5",{id:"declaration-1"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void AddCharacter(this ServerObjectManager som, INetworkPlayer player, GameObject character)\n")),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"the Player to add the character to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null},"The Network Object to add to the Player. Can be spawned or unspawned. Calling this method will respawn it.")))),(0,n.kt)("h4",{id:"replacecharacterserverobjectmanager-inetworkplayer-gameobject-boolean"},"ReplaceCharacter(ServerObjectManager, INetworkPlayer, GameObject, Boolean)"),(0,n.kt)("p",null,"This replaces the player object for a connection with a different player object. The old player object is not destroyed.\nIf a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes."),(0,n.kt)("h5",{id:"declaration-2"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void ReplaceCharacter(this ServerObjectManager som, INetworkPlayer player, GameObject character, bool keepAuthority = false)\n")),(0,n.kt)("h5",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"Connection which is adding the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null},"Player object spawned for the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"keepAuthority"),(0,n.kt)("td",{parentName:"tr",align:null},"Does the previous player remain attached to this connection?")))),(0,n.kt)("h4",{id:"replacecharacterserverobjectmanager-inetworkplayer-gameobject-int32-boolean"},"ReplaceCharacter(ServerObjectManager, INetworkPlayer, GameObject, Int32, Boolean)"),(0,n.kt)("p",null,"This replaces the player object for a connection with a different player object. The old player object is not destroyed.\nIf a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes."),(0,n.kt)("h5",{id:"declaration-3"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void ReplaceCharacter(this ServerObjectManager som, INetworkPlayer player, GameObject character, int prefabHash, bool keepAuthority = false)\n")),(0,n.kt)("h5",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"player"),(0,n.kt)("td",{parentName:"tr",align:null},"Connection which is adding the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"character"),(0,n.kt)("td",{parentName:"tr",align:null},"Player object spawned for the player.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"keepAuthority"),(0,n.kt)("td",{parentName:"tr",align:null},"Does the previous player remain attached to this connection?")))),(0,n.kt)("h4",{id:"spawnserverobjectmanager-gameobject-gameobject"},"Spawn(ServerObjectManager, GameObject, GameObject)"),(0,n.kt)("p",null,"Spawns the identity and settings its owner to the player that owns ownerObject"),(0,n.kt)("h5",{id:"declaration-4"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void Spawn(this ServerObjectManager som, GameObject obj, GameObject ownerObject)\n")),(0,n.kt)("h5",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"obj"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"ownerObject"),(0,n.kt)("td",{parentName:"tr",align:null},"An object owned by a player")))),(0,n.kt)("h4",{id:"spawnserverobjectmanager-gameobject-int32-inetworkplayer"},"Spawn(ServerObjectManager, GameObject, Int32, INetworkPlayer)"),(0,n.kt)("p",null,"Assigns prefabHash to the obj and then spawns it with owner"),(0,n.kt)("p",null," can only be set on an identity if the current value is Empty"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"This method is useful if you are creating network objects at runtime and both server and client know what  to set on an object\n")),(0,n.kt)("h5",{id:"declaration-5"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void Spawn(this ServerObjectManager som, GameObject obj, int prefabHash, INetworkPlayer owner = null)\n")),(0,n.kt)("h5",{id:"parameters-5"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"obj"),(0,n.kt)("td",{parentName:"tr",align:null},"The object to spawn.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null},"The prefabHash of the object to spawn. Used for custom spawn handlers.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"owner"),(0,n.kt)("td",{parentName:"tr",align:null},"The connection that has authority over the object")))),(0,n.kt)("h4",{id:"spawnserverobjectmanager-gameobject-inetworkplayer"},"Spawn(ServerObjectManager, GameObject, INetworkPlayer)"),(0,n.kt)("p",null,"Spawns the identity and settings its owner to owner"),(0,n.kt)("h5",{id:"declaration-6"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static void Spawn(this ServerObjectManager som, GameObject obj, INetworkPlayer owner = null)\n")),(0,n.kt)("h5",{id:"parameters-6"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"obj"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"owner"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"spawninstantiateserverobjectmanager-gameobject-nullableint32-inetworkplayer"},"SpawnInstantiate(ServerObjectManager, GameObject, Nullable","<","Int32",">",", INetworkPlayer)"),(0,n.kt)("p",null,"Instantiate a prefab an then Spawns it with ServerObjectManager"),(0,n.kt)("h5",{id:"declaration-7"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static GameObject SpawnInstantiate(this ServerObjectManager som, GameObject prefab, int? prefabHash = default(int? ), INetworkPlayer owner = null)\n")),(0,n.kt)("h5",{id:"parameters-7"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null},"prefab"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Nullable","<","System.Int32",">"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"owner"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GameObject"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"spawninstantiateserverobjectmanager-networkidentity-nullableint32-inetworkplayer"},"SpawnInstantiate(ServerObjectManager, NetworkIdentity, Nullable","<","Int32",">",", INetworkPlayer)"),(0,n.kt)("p",null,"Instantiate a prefab an then Spawns it with ServerObjectManager"),(0,n.kt)("h5",{id:"declaration-8"},"Declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static NetworkIdentity SpawnInstantiate(this ServerObjectManager som, NetworkIdentity prefab, int? prefabHash = default(int? ), INetworkPlayer owner = null)\n")),(0,n.kt)("h5",{id:"parameters-8"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.ServerObjectManager"),(0,n.kt)("td",{parentName:"tr",align:null},"som"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null},"prefab"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"System.Nullable","<","System.Int32",">"),(0,n.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.INetworkPlayer"),(0,n.kt)("td",{parentName:"tr",align:null},"owner"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h5",{id:"returns-1"},"Returns"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,n.kt)("td",{parentName:"tr",align:null})))))}m.isMDXComponent=!0}}]);