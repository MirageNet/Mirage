"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[4777],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),y=i,h=p["".concat(c,".").concat(y)]||p[y]||u[y]||a;return t?r.createElement(h,o(o({ref:n},d),{},{components:t})):r.createElement(h,o({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},14833:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(87462),i=(t(67294),t(3905));const a={sidebar_position:7},o="Code Generation",s={unversionedId:"guides/sync/code-generation",id:"guides/sync/code-generation",title:"Code Generation",description:"So for this script:",source:"@site/docs/guides/sync/code-generation.md",sourceDirName:"guides/sync",slug:"/guides/sync/code-generation",permalink:"/Mirage/docs/guides/sync/code-generation",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/sync/code-generation.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docs",previous:{title:"serialization-flow",permalink:"/Mirage/docs/guides/sync/serialization-flow"},next:{title:"Advanced Synchronization",permalink:"/Mirage/docs/guides/sync/custom-serialization"}},c={},l=[],d={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"code-generation"},"Code Generation"),(0,i.kt)("p",null,"So for this script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'using Mirage;\n\npublic class Data : NetworkBehaviour\n{\n    [SyncVar(hook = nameof(OnInt1Changed))]\n    public int int1 = 66;\n\n    [SyncVar]\n    public int int2 = 23487;\n\n    [SyncVar]\n    public string MyString = "Example string";\n\n    void OnInt1Changed(int oldValue, int newValue)\n    {\n        // do something here\n    }\n}\n')),(0,i.kt)("p",null,"The following sample shows the code that is generated by Mirage for the ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializeSyncVars")," function which is called inside ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),(0,i.kt)("inlineCode",{parentName:"p"},".OnSerialize"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public override bool SerializeSyncVars(NetworkWriter writer, bool initialState)\n{\n    // Write any SyncVars in base class\n    bool written = base.SerializeSyncVars(writer, forceAll);\n\n    if (initialState)\n    {\n        // The first time a game object is sent to a client, send all the data (and no dirty bits)\n        writer.WritePackedUInt32((uint)this.int1);\n        writer.WritePackedUInt32((uint)this.int2);\n        writer.Write(this.MyString);\n        return true;\n    }\n    else \n    {\n        // Writes which SyncVars have changed\n        writer.WritePackedUInt64(base.syncVarDirtyBits);\n\n        if ((base.get_syncVarDirtyBits() & 1u) != 0u)\n        {\n            writer.WritePackedUInt32((uint)this.int1);\n            written = true;\n        }\n\n        if ((base.get_syncVarDirtyBits() & 2u) != 0u)\n        {\n            writer.WritePackedUInt32((uint)this.int2);\n            written = true;  \n        }\n\n        if ((base.get_syncVarDirtyBits() & 4u) != 0u)\n        {\n            writer.Write(this.MyString);\n            written = true;     \n        }\n\n        return written;\n    }\n}\n")),(0,i.kt)("p",null,"The following sample shows the code that is generated by Mirage for the ",(0,i.kt)("inlineCode",{parentName:"p"},"DeserializeSyncVars")," function which is called inside ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),(0,i.kt)("inlineCode",{parentName:"p"},".OnDeserialize"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public override void DeserializeSyncVars(NetworkReader reader, bool initialState)\n{\n    // Read any SyncVars in base class\n    base.DeserializeSyncVars(reader, initialState);\n\n    if (initialState)\n    {\n        // The first time a game object is sent to a client, read all the data (and no dirty bits)\n        int oldInt1 = this.int1;\n        this.int1 = (int)reader.ReadPackedUInt32();\n        // if old and new values are not equal, call hook\n        if (!base.SyncVarEqual<int>(num, ref this.int1))\n        {\n            this.OnInt1Changed(num, this.int1);\n        }\n\n        this.int2 = (int)reader.ReadPackedUInt32();\n        this.MyString = reader.ReadString();\n        return;\n    }\n\n    int dirtySyncVars = (int)reader.ReadPackedUInt32();\n    // is 1st SyncVar dirty\n    if ((dirtySyncVars & 1) != 0)\n    {\n        int oldInt1 = this.int1;\n        this.int1 = (int)reader.ReadPackedUInt32();\n        // if old and new values are not equal, call hook\n        if (!base.SyncVarEqual<int>(num, ref this.int1))\n        {\n            this.OnInt1Changed(num, this.int1);\n        }\n    }\n\n    // is 2nd SyncVar dirty\n    if ((dirtySyncVars & 2) != 0)\n    {\n        this.int2 = (int)reader.ReadPackedUInt32();\n    }\n\n    // is 3rd SyncVar dirty\n    if ((dirtySyncVars & 4) != 0)\n    {\n        this.MyString = reader.ReadString();\n    }\n}\n")),(0,i.kt)("p",null,"If a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," has a base class that also has serialization functions, the base class functions should also be called."))}u.isMDXComponent=!0}}]);