"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[965],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(t),y=a,g=d["".concat(c,".").concat(y)]||d[y]||u[y]||i;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},77314:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_position:4},s="Generics",o={unversionedId:"guides/serialization/generics",id:"guides/serialization/generics",title:"Generics",description:"Mirage supports generic types for SyncVar, Rpcs, and fields in NetworkMessages.",source:"@site/docs/guides/serialization/generics.md",sourceDirName:"guides/serialization",slug:"/guides/serialization/generics",permalink:"/Mirage/docs/guides/serialization/generics",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/serialization/generics.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Advanced Serialization",permalink:"/Mirage/docs/guides/serialization/advanced"},next:{title:"SyncPrefab",permalink:"/Mirage/docs/guides/serialization/sync-prefab"}},c={},l=[{value:"NetworkBehaviour",id:"networkbehaviour",level:2},{value:"Ensure Type has Write and Read functions",id:"ensure-type-has-write-and-read-functions",level:2},{value:"Network Messages and other types",id:"network-messages-and-other-types",level:2},{value:"SyncList, SyncDictionary, SyncSet",id:"synclist-syncdictionary-syncset",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generics"},"Generics"),(0,a.kt)("p",null,"Mirage supports generic types for ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/sync/sync-var"},"SyncVar"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/remote-actions/"},"Rpcs"),", and fields in ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/remote-actions/network-messages"},"NetworkMessages"),"."),(0,a.kt)("h2",{id:"networkbehaviour"},"NetworkBehaviour"),(0,a.kt)("p",null,"By making a ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/game-objects/network-behaviour"},"NetworkBehaviour")," generic you can then use generic SyncVar fields or use the generic in an RPC."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyGenericBehaviour<T> : NetworkBehaviour\n{\n    [SyncVar]\n    public T Value;\n\n    public void MyRpc(T value) \n    {\n        // do stuff\n    }\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Making the RPC itself generic does not work. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"MyRpc<T>(T value)")," will not work. This is because the receiver will have no idea what generic to invoke the type as.")),(0,a.kt)("h2",{id:"ensure-type-has-write-and-read-functions"},"Ensure Type has Write and Read functions"),(0,a.kt)("p",null,"For a type to work as a generic, it must have a write and read that Mirage can find. For built-in types, this is done automatically (see ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/serialization/advanced"},"Serialization"),")."),(0,a.kt)("p",null,"For custom types Mirage will try to automatically find them and generate functions, however, this does not always work. Adding ",(0,a.kt)("inlineCode",{parentName:"p"},"[NetworkMessage]")," to the type will tell Mirage to generate functions for it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"[NetworkMessage]\npublic struct MyCustomType\n{\n    public int Value;\n}\n")),(0,a.kt)("p",null,"Alternatively, you can manually create Write and Read functions for your type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public static class MyCustomTypeExtensions \n{\n    public static void Write(this NetworkWriter writer, MyCustomType value) \n    {\n        // write here\n    }\n\n    public static MyCustomType Read(this NetworkReader reader) \n    {\n        // read here\n    }\n}\n")),(0,a.kt)("h2",{id:"network-messages-and-other-types"},"Network Messages and other types"),(0,a.kt)("p",null,"Generic messages are partly supported. Generic instances can be used as messages, For example, using ",(0,a.kt)("inlineCode",{parentName:"p"},"MyMessage<int>")," in the example below."),(0,a.kt)("p",null,"This also includes using generic types in RPC or inside other types as long they are generic instances."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public struct MyMessage<T>\n{\n    public T Value;\n}\n\nclass Manager \n{\n    void Start() \n    {\n        Server.MessageHandler.RegisterHandler<MyMessage<int>>(HandleMessage);\n    }\n\n    void HandleIntMessage(INetworkPlayer player, MyMessage<int> msg)\n    {\n        // do stuff\n    }\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Generic message should not have ",(0,a.kt)("inlineCode",{parentName:"p"},"[NetworkMessage]")," because this cause Mirage to try to make a writer for the generic itself. Only generic instances (eg ",(0,a.kt)("inlineCode",{parentName:"p"},"MyMessage<int>"),") can have serialize functions ")),(0,a.kt)("h2",{id:"synclist-syncdictionary-syncset"},"SyncList, SyncDictionary, SyncSet"),(0,a.kt)("p",null,"SyncList, SyncDictionary, and SyncSet can have generic types as their element type as long as it is a generic instance (eg ",(0,a.kt)("inlineCode",{parentName:"p"},"MyType<int>")," not ",(0,a.kt)("inlineCode",{parentName:"p"},"MyType<T>"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public struct MyType<T>\n{\n    public bool Option;\n    public T Value;\n}\n\npublic class MyBehaviour : NetworkBehaviour\n{\n    public SyncList<MyType<float>> myList;\n}\n")))}u.isMDXComponent=!0}}]);