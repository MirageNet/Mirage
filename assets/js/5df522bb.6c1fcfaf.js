"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[907],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),g=i,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||r;return n?a.createElement(m,o(o({ref:t},s),{},{components:n})):a.createElement(m,o({ref:t},s))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const r={},o="ZigZag Encode",l={unversionedId:"guides/bit-packing/zig-zag-encode",id:"guides/bit-packing/zig-zag-encode",title:"ZigZag Encode",description:"To encode a value using ZigZag Encoding you can use the ZigZagEncodeAttribute",source:"@site/docs/guides/bit-packing/zig-zag-encode.md",sourceDirName:"guides/bit-packing",slug:"/guides/bit-packing/zig-zag-encode",permalink:"/Mirage/docs/guides/bit-packing/zig-zag-encode",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/bit-packing/zig-zag-encode.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Vector Pack",permalink:"/Mirage/docs/guides/bit-packing/vector-pack"},next:{title:"Authentication",permalink:"/Mirage/docs/guides/authentication/"}},c={},u=[{value:"Use cases",id:"use-cases",level:3},{value:"Supported Types",id:"supported-types",level:3},{value:"Example 1",id:"example-1",level:3},{value:"Generated Code",id:"generated-code",level:3}],s={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"zigzag-encode"},"ZigZag Encode"),(0,i.kt)("p",null,"To encode a value using ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/mfuerstenau/ba870a29e16536fdbaba"},"ZigZag Encoding")," you can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage.Serialization/ZigZagEncodeAttribute"},"ZigZagEncodeAttribute")),(0,i.kt)("p",null,"This will cause negative values to be encoded as positive so that the sign bit is not lost when packing."),(0,i.kt)("p",null,"This works best with ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/bit-packing/var-int-blocks"},"VarIntBlocks")," but also works with ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/bit-packing/bit-count"},"BitCount"),"."),(0,i.kt)("p",null,"This attribute can not be used on the same field as ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/bit-packing/bit-count-from-range"},"BitCountFromRange"),", this is because ",(0,i.kt)("inlineCode",{parentName:"p"},"BitCountFromRange")," already ensures negative values are packed correctly."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The sign of a value will take up 1 bit, so if the value is in the range -+100 it will need a bit count of 8")),(0,i.kt)("h3",{id:"use-cases"},"Use cases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A value that can be negative or positive")),(0,i.kt)("h3",{id:"supported-types"},"Supported Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Byte"),(0,i.kt)("li",{parentName:"ul"},"Short"),(0,i.kt)("li",{parentName:"ul"},"Int"),(0,i.kt)("li",{parentName:"ul"},"Long"),(0,i.kt)("li",{parentName:"ul"},"Enum")),(0,i.kt)("h3",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"A modifier that can be added to a character value to increase or decrease it"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyNetworkBehaviour : NetworkBehaviour \n{\n    [SyncVar, BitCount(8), ZigZagEncode]\n    public int modifier;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Range = 200")," so bit count is 8, causing the real range to be -128 to 127"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modifier = 57")," will serialize to ",(0,i.kt)("inlineCode",{parentName:"p"},"0111_0010")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modifier = -57")," will serialize to ",(0,i.kt)("inlineCode",{parentName:"p"},"0111_0001")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modifier = -110")," will serialize to ",(0,i.kt)("inlineCode",{parentName:"p"},"1101_1011"),", even tho -110 is out of range there is enough range because bit count rounds up."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modifier = 130")," ",(0,i.kt)("em",{parentName:"p"},"(out of range)")," will serialize to ",(0,i.kt)("inlineCode",{parentName:"p"},"0000_0100")),(0,i.kt)("h3",{id:"generated-code"},"Generated Code"),(0,i.kt)("p",null,"Source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[SyncVar, BitCount(8), ZigZagEncode]\npublic int myValue;\n")),(0,i.kt)("p",null,"Generated:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public override bool SerializeSyncVars(NetworkWriter writer, bool initialState)\n{\n    ulong syncVarDirtyBits = base.SyncVarDirtyBits;\n    bool result = base.SerializeSyncVars(writer, initialize);\n\n    if (initialState) \n    {\n        writer.Write((ulong)ZigZag.Encode(this.myValue), 8);\n        return true;\n    }\n\n    writer.Write(syncVarDirtyBits, 1);\n    if ((syncVarDirtyBits & 1UL) != 0UL)\n    {\n        writer.Write((ulong)ZigZag.Encode(this.myValue), 8);\n        result = true;\n    }\n\n    return result;\n}\n\npublic override void DeserializeSyncVars(NetworkReader reader, bool initialState)\n{\n    base.DeserializeSyncVars(reader, initialState);\n\n    if (initialState)\n    {\n        this.myValue = ZigZag.Decode(reader.Read(8));\n        return;\n    }\n\n    ulong dirtyMask = reader.Read(1);\n    if ((dirtyMask & 1UL) != 0UL)\n    {\n        this.myValue = ZigZag.Decode(reader.Read(8));\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"last updated for Mirage v101.8.0")))}p.isMDXComponent=!0}}]);