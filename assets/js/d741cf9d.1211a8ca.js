"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[5718],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var a=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),h=i,f=d["".concat(s,".").concat(h)]||d[h]||p[h]||n;return r?a.createElement(f,o(o({ref:t},u),{},{components:r})):a.createElement(f,o({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,o=new Array(n);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<n;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},49700:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=r(87462),i=(r(67294),r(3905));const n={sidebar_position:6},o=void 0,l={unversionedId:"guides/sync/serialization-flow",id:"guides/sync/serialization-flow",title:"serialization-flow",description:"Serialization Flow",source:"@site/docs/guides/sync/serialization-flow.md",sourceDirName:"guides/sync",slug:"/guides/sync/serialization-flow",permalink:"/Mirage/docs/guides/sync/serialization-flow",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/main/doc/docs/guides/sync/serialization-flow.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"Sync Settings",permalink:"/Mirage/docs/guides/sync/sync-settings"},next:{title:"Code Generation",permalink:"/Mirage/docs/guides/sync/code-generation"}},s={},c=[{value:"Serialization Flow",id:"serialization-flow",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"serialization-flow"},"Serialization Flow"),(0,i.kt)("p",null,"Game objects with the Network Identity component attached can have multiple scripts derived from ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),". The flow for serializing these game objects is:"),(0,i.kt)("p",null,"On the server:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," has a dirty mask. This mask is available inside ",(0,i.kt)("inlineCode",{parentName:"li"},"OnSerialize")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"syncVarDirtyBits")),(0,i.kt)("li",{parentName:"ul"},"Each SyncVar in a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," script is assigned a bit in the dirty mask."),(0,i.kt)("li",{parentName:"ul"},"Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask"),(0,i.kt)("li",{parentName:"ul"},"Alternatively, calling ",(0,i.kt)("inlineCode",{parentName:"li"},"SetDirtyBit")," writes directly to the dirty mask"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkIdentity"},"NetworkIdentity")," game objects are checked on the server as part of its update loop"),(0,i.kt)("li",{parentName:"ul"},"If any ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),"s on a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkIdentity"},"NetworkIdentity")," are dirty, then a ",(0,i.kt)("inlineCode",{parentName:"li"},"UpdateVars")," packet is created for that game object"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"UpdateVars")," packet is populated by calling ",(0,i.kt)("inlineCode",{parentName:"li"},"OnSerialize")," on each ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," on the game object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),"s that are not dirty write a zero to the packet for their dirty bits"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),"s that are dirty write their dirty mask, then the values for the SyncVars that have changed"),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"OnSerialize")," returns true for a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour"),", the dirty mask is reset for that ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," so it does not send again until its value changes."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"UpdateVars")," packet is sent to ready clients that are observing the game object")),(0,i.kt)("p",null,"On the client:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an ",(0,i.kt)("inlineCode",{parentName:"li"},"UpdateVars packet")," is received for a game object"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"OnDeserialize")," function is called for each ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," script on the game object"),(0,i.kt)("li",{parentName:"ul"},"Each ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," script on the game object reads a dirty mask."),(0,i.kt)("li",{parentName:"ul"},"If the dirty mask for a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/Mirage/NetworkBehaviour"},"NetworkBehaviour")," is zero, the ",(0,i.kt)("inlineCode",{parentName:"li"},"OnDeserialize")," function returns without reading any more"),(0,i.kt)("li",{parentName:"ul"},"If the dirty mask is a non-zero value, then the ",(0,i.kt)("inlineCode",{parentName:"li"},"OnDeserialize")," function reads the values for the SyncVars that correspond to the dirty bits that are set"),(0,i.kt)("li",{parentName:"ul"},"If there are SyncVar hook functions, those are invoked with the value read from the stream.")))}p.isMDXComponent=!0}}]);